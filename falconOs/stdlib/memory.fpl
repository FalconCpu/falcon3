
const ERR_OUT_OF_MEMORY = 0xE01
const ERR_DOUBLE_FREE = 0xE02
const ERR_EMPTY_LIST = 0xE03
const ERR_INVALID_ARG = 0xE04

# FreeMemBlock
# Blocks are always a multiple of 16 bytes in size - this means the lower 4 bits are always 0
# hence we can repurpose them to indicate the block status
# 0 = free
# 1 = allocated for an object
# 2 = allocated for an array or string

const BLOCK_FREE = 0
const BLOCK_OBJECT = 1
const BLOCK_ARRAY = 2

class FreeMemBlock
    var size : Int             # size of block (lower 4 bits are always 0)
    var next : FreeMemBlock?   # next free block

class ArrayMemBlock
    var size : Int             # size of block (+ lower 4 bits = type)
    var numElements:Int
    # user data follows

class ObjectMemBlock
    var size : Int      # size of block (+ lower 4 bits = type)
    var type : ClassDescriptor

class ClassDescriptor          # An instance of this class is created by the compiler for each class in the program
    var size : Int      # size of an instance of this class (excluding the memory system header)
    var name : String
    # vtables follow


var heapStart : Int
var heapEnd : Int
var freeList : FreeMemBlock?         # linked list of free blocks sorted by size

extern fun allocateMemory(size:Int) -> Int
extern fun freeMemory(ptr:Int)

fun initializeMemorySystem()
    val heapSize = 65536
    heapStart = allocateMemory(heapSize)
    heapEnd = heapStart + heapSize
    freeList = heapStart as FreeMemBlock
    freeList.size = heapSize | BLOCK_FREE
    freeList.next = null

fun insertBlockIntoFreeList(block:FreeMemBlock, size:Int)
    # Insert the block into the freelist, keeping the list sorted by size
    block.size = size
    var p = freeList
    var prev : FreeMemBlock? = null
    while p!=null and p.size<size
        prev = p
        p = p.next
    if prev=null
        block.next = freeList
        freeList = block
    else
        block.next = prev.next
        prev.next = block
end fun

fun mallocInternal(sizeReq:Int) -> FreeMemBlock?
    # The size is a multiple of 16 - and includes the header
    # val sizeReq = (size + 8 + 15) & 0xFFFFFFF0

    # Walk along the freelist to find the first block that is big enough
    var prev : FreeMemBlock? = null
    var p = freeList
    while p!=null and p.size<sizeReq
        prev = p
        p = p.next
    if p=null then abort ERR_OUT_OF_MEMORY

    # remove the block from the freelist
    if prev=null
        freeList = p.next
    else
        prev.next = p.next

    # If the block is big enough, split it into two blocks
    val sizeSplit = p.size - sizeReq
    if sizeSplit>0
        # Create a new block at the end of the current block
        val newBlock = ((p as Int) + sizeReq as FreeMemBlock)
        insertBlockIntoFreeList(newBlock, sizeSplit)
    return p
end fun

fun mallocObject(klass:ClassDescriptor) -> Int
    val size = (klass.size + 8 + 15) & 0xFFFFFFF0       # add 8 for the header, and round up to a multiple of 16
    val ret = mallocInternal(size) as ObjectMemBlock
    ret.size = size | BLOCK_OBJECT
    ret.type = klass
    return (ret as Int)+8       # Skip past the object's header

fun mallocArray(numElements:Int, elementSize:Int, clear:Bool) -> Int
    val size = ((numElements * elementSize) + 8 + 15) & 0xfffffff0  # add 8 for header, and round up to multiple of 16
    val ret = mallocInternal(size) as ArrayMemBlock
    ret.size = size | BLOCK_ARRAY
    ret.numElements = numElements
    val retInt = (ret as Int)+8 # Skip past the object's header
    if clear
        val numWords = numElements * elementSize / 4
        val ary = (retInt as Array<Int>)
        for i in 0..<numWords
            ary[i] = 0
    return retInt

fun free(ptr:Int)
    if ptr=0 then return        # do nothing for a null pointer
    val block = (ptr - 8) as FreeMemBlock
    val size = block.size
    if (size & 0xF)=0 then abort ERR_DOUBLE_FREE
    insertBlockIntoFreeList(block, size & 0xfffffff0)

fun dumpMemorySystem()
    var p = heapStart
    printf("MEMORY DUMP\n")
    while p < heapEnd
        val block = p as FreeMemBlock
        val sizeAndType = block.size
        val type = sizeAndType & 0xF
        val size = sizeAndType & 0xFFFFFFF0
        printf("%08x: ", p)
        when type
            BLOCK_OBJECT ->
                val className = (p as ObjectMemBlock).type.name
                printf("Object: Size=%-8d type=%s\n", size, className)
            BLOCK_ARRAY ->
                val numElements = (p as ArrayMemBlock).numElements
                printf("Array: Size=%-8d NumElements=%d\n",size,numElements)
            BLOCK_FREE ->
                printf(" Free: Size=%-8d Next=%08x\n", size, block.next)
        p += size
    end while
end fun

fun printHex(a:Int)
    for i in 7..>=0
        val digit = (a >> (i * 4)) & 0xF
        if digit < 10
            print(digit as Char)
        else
            print(digit + 55 as Char)