# Generated by Falcon Compiler
# Global vars:-
# errno @ 0
# freeList @ 4
# freeBlocks @ 8
# allTasks @ 12
# runningTasks @ 16
# runningTaskIndex @ 20
# lastSwitchTime @ 24
# taskYielded @ 28
# windowManager @ 32
# currentFont @ 36
# blitDestWindow @ 40
# blitSrcWindow @ 44
# blitFont @ 48
# packetCommand @ 52
/panic(String,ErrorCode):
# message = R1
# code = R9
sub SP, SP, 16
stw R9, SP[8]
stw R30, SP[12]
ld R9, R2
ld R2, 1
stw R2, SP[0]
stw R1, SP[4]
ld R1, OBJ0
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, R9
jsr /shutdown(ErrorCode)
ldw R9, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/printChar(Char):
# c = R1
# dummy = R1
jmp .L3
.L1:
.L3:
ld R2, -536870912
ldw R2, R2[16]
ld R3, 3
blt R2, R3, .L1
ld R2, -536870912
stw R1, R2[16]
ret

/kprintString(String,Int,Justify):
# width = R2
# justify = R9
# s = R10
# pad = R11
# i = R12
# i = R12
# i = R9
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R10, R1
ld R9, R3
ldw R1, R10[-4]
sub R11, R2, R1
ld R1, 0
bne R9, R1, .L2
jmp .L1
.L2:
ld R12, 0
jmp .L7
.L4:
ld R1, 32
jsr /printChar(Char)
add R12, R12, 1
.L7:
blt R12, R11, .L4
.L1:
ld R12, 0
ldw R13, R10[-4]
jmp .L11
.L8:
ldw R1, R10[-4]
idx1 R1, R12, R1
add R1, R10, R1
ldb R1, R1[0]
jsr /printChar(Char)
add R12, R12, 1
.L11:
blt R12, R13, .L8
ld R1, 0
beq R9, R1, .L13
jmp .L12
.L13:
ld R9, 0
jmp .L18
.L15:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L18:
blt R9, R11, .L15
.L12:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/kprintInt(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# minus = R9
# index = R10
# pad = R11
# i = R9
# i = R9
# i = R9
# i = R12
# i = R9
# i = R9
# V44 = R5
sub SP, SP, 36
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R12, SP[28]
stw R30, SP[32]
ld R9, 0
ld R4, 0
blt R1, R4, .L2
jmp .L1
.L2:
ld R9, 1
ld R4, 0
sub R1, R4, R1
.L1:
add R5, SP, 0
add R4, R5, 16
.L4:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L4
ld R10, 0
.L5:
mods R4, R1, 10
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R10, R6
add R5, R5, R6
stb R4, R5[0]
add R10, R10, 1
divs R1, R1, 10
ld R4, 0
beq R1, R4, .L6
jmp .L5
.L6:
sub R1, R2, R10
sub R11, R1, R9
ld R1, 0
beq R3, R1, .L9
ld R1, 1
beq R3, R1, .L10
jmp .L11
jmp .L8
.L9:
ld R1, 1
beq R9, R1, .L13
jmp .L12
.L13:
ld R1, 45
jsr /printChar(Char)
.L12:
sub R9, R10, 1
ld R10, 0
jmp .L18
.L15:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L18:
bge R9, R10, .L15
ld R9, 0
jmp .L22
.L19:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L22:
blt R9, R11, .L19
jmp .L8
.L10:
ld R12, 0
jmp .L26
.L23:
ld R1, 32
jsr /printChar(Char)
add R12, R12, 1
.L26:
blt R12, R11, .L23
ld R1, 1
beq R9, R1, .L28
jmp .L27
.L28:
ld R1, 45
jsr /printChar(Char)
.L27:
sub R9, R10, 1
ld R10, 0
jmp .L33
.L30:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L33:
bge R9, R10, .L30
jmp .L8
.L11:
ld R1, 1
beq R9, R1, .L35
jmp .L34
.L35:
ld R1, 45
jsr /printChar(Char)
.L34:
ld R9, 0
jmp .L40
.L37:
ld R1, 48
jsr /printChar(Char)
add R9, R9, 1
.L40:
blt R9, R11, .L37
sub R9, R10, 1
ld R10, 0
jmp .L44
.L41:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L44:
bge R9, R10, .L41
.L8:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R12, SP[28]
ldw R30, SP[32]
add SP, SP, 36
ret

/kprintHex(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# index = R9
# pad = R10
# i = R9
# i = R9
# i = R9
# i = R11
# i = R11
# i = R9
# V38 = R5
# digit = R4
sub SP, SP, 32
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R30, SP[28]
add R5, SP, 0
add R4, R5, 16
.L1:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L1
ld R9, 0
.L2:
and R4, R1, 15
ld R5, 10
blt R4, R5, .L6
jmp .L8
.L6:
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
jmp .L5
.L8:
sub R4, R4, 10
add R4, R4, 65
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
.L5:
add R9, R9, 1
lsr R1, R1, 4
ld R4, 0
beq R1, R4, .L3
jmp .L2
.L3:
sub R10, R2, R9
ld R1, 0
beq R3, R1, .L10
ld R1, 1
beq R3, R1, .L11
jmp .L12
jmp .L9
.L10:
sub R9, R9, 1
ld R11, 0
jmp .L16
.L13:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L16:
bge R9, R11, .L13
ld R9, 0
jmp .L20
.L17:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L20:
blt R9, R10, .L17
jmp .L9
.L11:
ld R11, 0
jmp .L24
.L21:
ld R1, 32
jsr /printChar(Char)
add R11, R11, 1
.L24:
blt R11, R10, .L21
sub R9, R9, 1
ld R10, 0
jmp .L28
.L25:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L28:
bge R9, R10, .L25
jmp .L9
.L12:
ld R11, 0
jmp .L32
.L29:
ld R1, 48
jsr /printChar(Char)
add R11, R11, 1
.L32:
blt R11, R10, .L29
sub R9, R9, 1
ld R10, 0
jmp .L36
.L33:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L36:
bge R9, R10, .L33
.L9:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/kprintf(String,Any...):
# format = R1
# c = R1
# args = R9
# width = R11
# justify = R12
# index = R13
# V45 = R14
# inPercent = R15
sub SP, SP, 32
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R15, SP[24]
stw R30, SP[28]
ld R9, R2
ld R15, 0
ld R11, 0
ld R12, 1
ld R13, 0
ldw R2, R1[-4]
mul R2, R2, 1
add R10, R1, R2
ld R14, R1
jmp .L3
.L1:
ldb R1, R14[0]
bne R15, 0, .L6
jmp .L8
.L6:
ld R2, 100
beq R1, R2, .L10
jmp .L12
.L10:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintInt(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L9
.L12:
ld R2, 120
beq R1, R2, .L14
jmp .L16
.L14:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintHex(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L13
.L16:
ld R2, 115
beq R1, R2, .L18
jmp .L20
.L18:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintString(String,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L17
.L20:
ld R2, 99
beq R1, R2, .L22
jmp .L24
.L22:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
jsr /printChar(Char)
add R13, R13, 1
ld R15, 0
jmp .L21
.L24:
ld R2, 48
beq R1, R2, .L28
jmp .L27
.L28:
ld R2, 0
beq R11, R2, .L26
.L27:
jmp .L29
.L26:
ld R12, 2
jmp .L25
.L29:
ld R2, 45
beq R1, R2, .L33
jmp .L32
.L33:
ld R2, 0
beq R11, R2, .L31
.L32:
jmp .L34
.L31:
ld R12, 0
jmp .L30
.L34:
ld R2, 48
bge R1, R2, .L38
jmp .L37
.L38:
ld R2, 57
bge R2, R1, .L36
.L37:
jmp .L39
.L36:
mul R2, R11, 10
sub R1, R1, 48
add R11, R2, R1
jmp .L35
.L39:
jsr /printChar(Char)
ld R15, 0
.L35:
.L30:
.L25:
.L21:
.L17:
.L13:
.L9:
jmp .L5
.L8:
ld R2, 37
beq R1, R2, .L41
jmp .L43
.L41:
ld R15, 1
ld R11, 0
ld R12, 1
jmp .L40
.L43:
jsr /printChar(Char)
.L40:
.L5:
add R14, R14, 1
.L3:
blt R14, R10, .L1
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R15, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/kPrintBlock(Array<Char>,Int):
# ptr = R1
# size = R2
# i = R3
# dummy = R1
ld R3, 0
jmp .L4
.L1:
jmp .L7
.L5:
.L7:
ld R4, -536870912
ldw R4, R4[16]
ld R5, 0
beq R4, R5, .L5
ldw R4, R1[-4]
idx1 R4, R3, R4
add R4, R1, R4
ldb R4, R4[0]
ld R5, -536870912
stw R4, R5[16]
add R3, R3, 1
.L4:
blt R3, R2, .L1
ret

/List/add(T):
# this = R9
# item = R10
# oldArray = R11
# i = R1
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R11, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R11[-4]
jmp .L7
.L4:
ldw R3, R11[-4]
idx4 R3, R1, R3
add R3, R11, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R11, 0, .L8
ld R1, R11
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[4]
ldw R2, R9[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/List/get(Int):
# this = R1
# index = R2
ldw R1, R1[4]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/set(Int,T):
# this = R1
# index = R2
# item = R3
ldw R1, R1[4]
ldw R4, R1[-4]
idx4 R2, R2, R4
add R1, R1, R2
stw R3, R1[0]
ret

/List/isEmpty():
# this = R1
ldw R1, R1[0]
xor R8, R1, 0
cltu R8, R8, 1
ret

/List/isNotEmpty():
# this = R1
ldw R1, R1[0]
clt R8, R1, 1
xor R8, R8, 1
ret

/List/take():
# this = R2
ld R2, R1
ldw R1, R2[0]
ld R3, 0
beq R1, R3, .L2
jmp .L1
.L2:
ld R1, 123
sys 1
.L1:
ldw R1, R2[0]
sub R1, R1, 1
stw R1, R2[0]
ldw R1, R2[4]
ldw R2, R2[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/clear():
# this = R1
ld R2, 0
stw R2, R1[0]
ret

/List/removeAt(Int):
# this = R1
# index = R2
# i = R2
# ret = R8
ldw R3, R1[4]
ldw R4, R3[-4]
idx4 R4, R2, R4
add R3, R3, R4
ldw R8, R3[0]
ldw R3, R1[0]
sub R3, R3, 1
jmp .L4
.L1:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L4:
blt R2, R3, .L1
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ret

/List/remove(T):
# this = R1
# item = R2
# j = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R2, R3
ldw R3, R1[0]
sub R3, R3, 1
jmp .L11
.L8:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L11:
blt R2, R3, .L8
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/indexOf(T):
# this = R1
# item = R2
# i = R8
ld R8, 0
ldw R3, R1[0]
jmp .L4
.L1:
ldw R4, R1[4]
ldw R5, R4[-4]
idx4 R5, R8, R5
add R4, R4, R5
ldw R4, R4[0]
beq R4, R2, .L6
jmp .L5
.L6:
jmp .L0
.L5:
add R8, R8, 1
.L4:
blt R8, R3, .L1
ld R8, -1
.L0:
ret

/List/addAt(Int,T):
# this = R9
# item = R10
# index = R11
# oldArray = R12
# i = R1
# i = R1
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R11, R2
ld R10, R3
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R12, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R12[-4]
jmp .L7
.L4:
ldw R3, R12[-4]
idx4 R3, R1, R3
add R3, R12, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R12, 0, .L8
ld R1, R12
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[0]
sub R1, R1, 1
jmp .L12
.L9:
ldw R2, R9[4]
ldw R3, R2[-4]
idx4 R3, R1, R3
add R2, R2, R3
ldw R2, R2[0]
ldw R3, R9[4]
add R4, R1, 1
ldw R5, R3[-4]
idx4 R4, R4, R5
add R3, R3, R4
stw R2, R3[0]
sub R1, R1, 1
.L12:
bge R1, R11, .L9
ldw R1, R9[4]
ldw R2, R1[-4]
idx4 R2, R11, R2
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/List/contains(T):
# this = R1
# item = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/last():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R2, R1[4]
ldw R1, R1[0]
sub R1, R1, 1
ldw R3, R2[-4]
idx4 R1, R1, R3
add R1, R2, R1
ldw R8, R1[0]
.L0:
ret

/List/first():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R1, R1[4]
ld R2, 0
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
.L0:
ret

/initializeMemorySystem():
ld R1, 4096
stw R1, R29[4]
ld R1, 61440
ldw R2, R29[4]
stw R1, R2[0]
ld R1, 0
ldw R2, R29[4]
stw R1, R2[4]
ret

/insertBlockIntoFreeList(FreeMemBlock,Int):
# block = R1
# size = R2
# prev = R3
# p = R4
stw R2, R1[0]
ldw R4, R29[4]
ld R3, 0
jmp .L3
.L1:
ld R3, R4
ldw R4, R4[4]
.L3:
ld R5, 0
bne R4, R5, .L4
jmp .L2
.L4:
ldw R5, R4[0]
blt R5, R2, .L1
.L2:
ld R2, 0
beq R3, R2, .L6
jmp .L8
.L6:
ldw R2, R29[4]
stw R2, R1[4]
stw R1, R29[4]
jmp .L5
.L8:
ldw R2, R3[4]
stw R2, R1[4]
stw R1, R3[4]
.L5:
ret

/mallocInternal(Int):
# sizeReq = R1
# newBlock = R1
# sizeSplit = R2
# p = R9
# prev = R2
sub SP, SP, 12
stw R9, SP[4]
stw R30, SP[8]
ld R2, 0
ldw R9, R29[4]
jmp .L3
.L1:
ld R2, R9
ldw R9, R9[4]
.L3:
ld R3, 0
bne R9, R3, .L4
jmp .L2
.L4:
ldw R3, R9[0]
blt R3, R1, .L1
.L2:
ld R3, 0
beq R9, R3, .L6
jmp .L5
.L6:
ld R1, 0
stw R1, SP[0]
ld R1, OBJ1
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L5:
ld R3, 0
beq R2, R3, .L9
jmp .L11
.L9:
ldw R2, R9[4]
stw R2, R29[4]
jmp .L8
.L11:
ldw R3, R9[4]
stw R3, R2[4]
.L8:
ldw R2, R9[0]
sub R2, R2, R1
ld R3, 0
blt R3, R2, .L13
jmp .L12
.L13:
add R1, R9, R1
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L12:
ld R8, R9
.L0:
ldw R9, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/mallocObject(ClassDescriptor):
# ret = R8
# klass = R9
# size = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ldw R1, R9[0]
add R1, R1, 8
add R1, R1, 15
and R10, R1, -16
ld R1, R10
jsr /mallocInternal(Int)
or R1, R10, 1
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/mallocArray(Int,Int,Bool):
# ret = R8
# retInt = R8
# numElements = R9
# elementSize = R10
# clear = R11
# size = R12
# ary = R1
# i = R2
# numWords = R3
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R10, R2
ld R11, R3
mul R1, R9, R10
add R1, R1, 8
add R1, R1, 15
and R12, R1, -16
ld R1, R12
jsr /mallocInternal(Int)
or R1, R12, 2
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
bne R11, 0, .L2
jmp .L1
.L2:
mul R1, R9, R10
divs R3, R1, 4
ld R1, R8
ld R2, 0
jmp .L7
.L4:
ld R4, 0
ldw R5, R1[-4]
idx4 R5, R2, R5
add R5, R1, R5
stw R4, R5[0]
add R2, R2, 1
.L7:
blt R2, R3, .L4
.L1:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/free(Int):
# ptr = R1
# block = R9
# size = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
jmp .L0
.L1:
sub R9, R1, 8
ldw R10, R9[0]
and R1, R10, 15
ld R2, 0
beq R1, R2, .L5
jmp .L4
.L5:
ld R1, OBJ2
ld R2, 2
jsr /panic(String,ErrorCode)
.L4:
and R2, R10, -16
ld R1, R9
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/dumpMemorySystem():
# p = R9
# size = R10
# block = R11
# type = R12
# sizeAndType = R1
# className = R1
# numElements = R1
# freeBlocks = R1
sub SP, SP, 68
stw R9, SP[48]
stw R10, SP[52]
stw R11, SP[56]
stw R12, SP[60]
stw R30, SP[64]
ld R9, 4096
ld R1, 0
stw R1, SP[0]
ld R1, OBJ3
add R2, SP, 4
jsr /kprintf(String,Any...)
jmp .L3
.L1:
ld R11, R9
ldw R1, R11[0]
and R12, R1, 15
and R10, R1, -16
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ4
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R1, 1
beq R12, R1, .L5
ld R1, 2
beq R12, R1, .L6
ld R1, 0
beq R12, R1, .L7
jmp .L4
.L5:
ldw R1, R9[4]
ldw R1, R1[4]
ld R2, 2
stw R2, SP[12]
stw R10, SP[16]
stw R1, SP[20]
ld R1, OBJ5
add R2, SP, 16
jsr /kprintf(String,Any...)
jmp .L4
.L6:
ldw R1, R9[4]
ld R2, 2
stw R2, SP[24]
stw R10, SP[28]
stw R1, SP[32]
ld R1, OBJ6
add R2, SP, 28
jsr /kprintf(String,Any...)
jmp .L4
.L7:
ld R1, 2
stw R1, SP[36]
stw R10, SP[40]
ldw R1, R11[4]
stw R1, SP[44]
ld R1, OBJ7
add R2, SP, 40
jsr /kprintf(String,Any...)
.L4:
add R9, R9, R10
.L3:
ld R1, 65536
blt R9, R1, .L8
jmp .L2
.L8:
ld R1, 0
bge R9, R1, .L1
.L2:
ldw R9, SP[48]
ldw R10, SP[52]
ldw R11, SP[56]
ldw R12, SP[60]
ldw R30, SP[64]
add SP, SP, 68
ret

/getBuddy(Int):
# blk = R1
# size = R2
and R2, R1, 15
ld R3, 4096
lsl R2, R3, R2
xor R8, R1, R2
ret

/mergeBuddy(Int):
# blk = R1
# size = R2
# base = R1
and R2, R1, 15
ld R3, -8192
lsl R3, R3, R2
and R1, R1, R3
add R2, R2, 1
or R8, R1, R2
ret

/freeBlock(Int):
# b = R1
# blk = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
jmp .L3
.L1:
ld R1, R9
jsr /mergeBuddy(Int)
ld R9, R8
.L3:
ld R1, R9
jsr /getBuddy(Int)
ldw R1, R29[8]
and R2, R9, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R8
jsr /List/remove(T)
bne R8, 0, .L1
ldw R1, R29[8]
and R2, R9, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R9
jsr /List/add(T)
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/buddyLog2(Int):
# size = R1
# s = R1
# logSize = R8
ld R8, 0
jmp .L3
.L1:
lsr R1, R1, 1
add R8, R8, 1
.L3:
ld R2, 4096
blt R2, R1, .L1
ret

/allocateBlock(Int):
# size = R1
# logSize = R9
# slot = R10
# blk = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
jsr /buddyLog2(Int)
ld R9, R8
ld R10, R9
jmp .L3
.L1:
add R10, R10, 1
ld R1, 16
beq R10, R1, .L5
jmp .L4
.L5:
ld R1, OBJ1
ld R2, 1
jsr /panic(String,ErrorCode)
.L4:
.L3:
ldw R1, R29[8]
ldw R2, R1[-4]
idx4 R2, R10, R2
add R1, R1, R2
ldw R1, R1[0]
jsr /List/isEmpty()
bne R8, 0, .L1
ldw R1, R29[8]
ldw R2, R1[-4]
idx4 R2, R10, R2
add R1, R1, R2
ldw R1, R1[0]
jsr /List/take()
ld R10, R8
jmp .L9
.L7:
sub R10, R10, 1
ld R1, R10
jsr /getBuddy(Int)
ldw R1, R29[8]
and R2, R10, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R8
jsr /List/add(T)
.L9:
and R1, R10, 15
blt R9, R1, .L7
ld R8, R10
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/initializeBuddyAllocator():
# V36 = R11
# V37 = R12
# blk = R9
# it = R1
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R9, 16
ld R2, 4
ld R3, 0
ld R1, R9
jsr /mallocArray(Int,Int,Bool)
ld R10, R8
ld R11, 0
ld R12, R10
jmp .L2
.L1:
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R13, R8
ld R1, R13
jsr /List
stw R13, R12[0]
add R11, R11, 1
add R12, R12, 4
.L2:
blt R11, R9, .L1
stw R10, R29[8]
ld R9, 65540
jmp .L5
.L3:
ld R1, R9
jsr /freeBlock(Int)
ld R1, -4096
and R1, R9, R1
mul R1, R1, 2
and R2, R9, 15
add R1, R1, R2
add R9, R1, 1
.L5:
ld R1, 67108864
blt R9, R1, .L3
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/dumpBuddyAllocator():
# blk = R8
# i = R9
# V48 = R13
# allTasks = R1
# runningTasks = R1
# runningTaskIndex = R1
# lastSwitchTime = R1
# taskYielded = R1
# windowManager = R1
sub SP, SP, 48
stw R9, SP[24]
stw R10, SP[28]
stw R11, SP[32]
stw R12, SP[36]
stw R13, SP[40]
stw R30, SP[44]
ld R1, 0
stw R1, SP[0]
ld R1, OBJ8
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R9, 0
ld R10, 16
jmp .L4
.L1:
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ9
add R2, SP, 8
jsr /kprintf(String,Any...)
ldw R1, R29[8]
ldw R2, R1[-4]
idx4 R2, R9, R2
add R1, R1, R2
ldw R11, R1[0]
ldw R12, R11[0]
ld R13, 0
jmp .L7
.L5:
ld R1, R11
ld R2, R13
jsr /List/get(Int)
ld R1, 1
stw R1, SP[12]
stw R8, SP[16]
ld R1, OBJ4
add R2, SP, 16
jsr /kprintf(String,Any...)
add R13, R13, 1
.L7:
blt R13, R12, .L5
ld R1, 0
stw R1, SP[20]
ld R1, OBJ10
add R2, SP, 24
jsr /kprintf(String,Any...)
add R9, R9, 1
.L4:
blt R9, R10, .L1
ldw R9, SP[24]
ldw R10, SP[28]
ldw R11, SP[32]
ldw R12, SP[36]
ldw R13, SP[40]
ldw R30, SP[44]
add SP, SP, 48
ret

/TaskControlBlock/addMemoryBlock(Int):
# this = R1
# block = R2
# i = R3
sub SP, SP, 12
stw R30, SP[8]
ld R3, 0
ld R4, 8
jmp .L4
.L1:
add R5, R1, 136
ld R6, 8
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
ld R6, 0
beq R5, R6, .L6
jmp .L5
.L6:
add R1, R1, 136
ld R4, 8
idx4 R3, R3, R4
add R1, R1, R3
stw R2, R1[0]
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R2, 1
stw R2, SP[0]
ldw R1, R1[168]
stw R1, SP[4]
ld R1, OBJ11
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, OBJ12
ld R2, 5
jsr /panic(String,ErrorCode)
.L0:
ldw R30, SP[8]
add SP, SP, 12
ret

/TaskControlBlock/removeMemoryBlock(Int):
# this = R1
# block = R2
# i = R2
# blk = R3
ld R3, -4096
and R3, R2, R3
ld R2, 0
ld R4, 8
jmp .L4
.L1:
add R5, R1, 136
ld R6, 8
idx4 R6, R2, R6
add R5, R5, R6
ldw R5, R5[0]
ld R6, -4096
and R5, R5, R6
beq R5, R3, .L6
jmp .L5
.L6:
ld R3, 0
add R1, R1, 136
ld R4, 8
idx4 R2, R2, R4
add R1, R1, R2
stw R3, R1[0]
ld R8, 1
jmp .L0
.L5:
add R2, R2, 1
.L4:
blt R2, R4, .L1
ld R8, 0
.L0:
ret

/TaskControlBlock/dump():
# this = R9
# i = R10
sub SP, SP, 44
stw R9, SP[28]
stw R10, SP[32]
stw R11, SP[36]
stw R30, SP[40]
ld R9, R1
ld R1, 1
stw R1, SP[0]
ldw R1, R9[0]
stw R1, SP[4]
ld R1, OBJ13
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R10, 1
ld R11, 31
jmp .L4
.L1:
ld R1, 2
stw R1, SP[8]
stw R10, SP[12]
add R1, R9, 4
ld R2, 32
idx4 R2, R10, R2
add R1, R1, R2
ldw R1, R1[0]
stw R1, SP[16]
ld R1, OBJ14
add R2, SP, 12
jsr /kprintf(String,Any...)
and R1, R10, 7
ld R2, 7
beq R1, R2, .L6
jmp .L8
.L6:
ld R1, 0
stw R1, SP[20]
ld R1, OBJ10
add R2, SP, 24
jsr /kprintf(String,Any...)
jmp .L5
.L8:
ld R1, 0
stw R1, SP[24]
ld R1, OBJ15
add R2, SP, 28
jsr /kprintf(String,Any...)
.L5:
add R10, R10, 1
.L4:
bge R11, R10, .L1
ldw R9, SP[28]
ldw R10, SP[32]
ldw R11, SP[36]
ldw R30, SP[40]
add SP, SP, 44
ret

/TaskControlBlock/setSleeping():
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ldw R1, R9[172]
ld R2, 1
beq R1, R2, .L2
ldw R1, R9[172]
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
ldw R1, R29[16]
ld R2, R9
jsr /List/remove(T)
.L1:
ld R1, 2
stw R1, R9[172]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/TaskControlBlock/setReady():
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ldw R1, R9[172]
ld R2, 2
beq R1, R2, .L2
jmp .L1
.L2:
ldw R1, R29[16]
ld R2, R9
jsr /List/add(T)
.L1:
ld R1, 1
stw R1, R9[172]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/TaskControlBlock/receiveMessage(Message):
# msg = R2
# this = R3
# lm = R1
sub SP, SP, 4
stw R30, SP[0]
ld R3, R1
ldw R1, R3[180]
ld R4, 0
beq R1, R4, .L2
jmp .L4
.L2:
stw R2, R3[176]
stw R2, R3[180]
jmp .L1
.L4:
stw R2, R1[20]
stw R2, R3[180]
.L1:
ld R1, 0
stw R1, R2[20]
ldw R1, R3[172]
ld R2, 2
beq R1, R2, .L6
jmp .L5
.L6:
ld R1, 1
stw R1, R3[172]
ldw R1, R29[16]
ld R2, R3
jsr /List/add(T)
.L5:
ldw R30, SP[0]
add SP, SP, 4
ret

/TaskControlBlock/getMessage():
# this = R1
# msg = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ldw R9, R1[176]
ld R2, 0
beq R9, R2, .L2
jmp .L4
.L2:
jsr /TaskControlBlock/setSleeping()
jmp .L1
.L4:
ldw R2, R9[20]
stw R2, R1[176]
ldw R2, R1[176]
ld R3, 0
beq R2, R3, .L6
jmp .L5
.L6:
ld R2, 0
stw R2, R1[180]
.L5:
.L1:
ld R8, R9
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/TaskControlBlock/openWindow(String,Int,Int,Int,Int):
# name = R2
# x = R3
# y = R4
# width = R5
# height = R6
# this = R1
# w = R1
sub SP, SP, 4
stw R30, SP[0]
ldw R1, R29[32]
jsr /WindowManager/newWindow(String,Int,Int,Int,Int)
ldw R30, SP[0]
add SP, SP, 4
ret

/createTask(String,Int):
# task = R9
# taskStack = R10
# code = R10
# taskGlobals = R10
# name = R11
sub SP, SP, 44
stw R9, SP[28]
stw R10, SP[32]
stw R11, SP[36]
stw R30, SP[40]
ld R11, R1
ld R10, R2
ld R1, TaskControlBlock/class
jsr /mallocObject(ClassDescriptor)
ld R9, R8
ld R1, R9
jsr /TaskControlBlock
ld R1, 2
stw R1, SP[0]
stw R11, SP[4]
stw R9, SP[8]
ld R1, OBJ16
add R2, SP, 4
jsr /kprintf(String,Any...)
stw R11, R9[168]
ld R1, 1
stw R1, R9[172]
ld R1, -4096
and R1, R10, R1
stw R1, R9[0]
or R2, R10, 1280
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, 4096
jsr /allocateBlock(Int)
ld R10, R8
ld R1, -4096
and R1, R10, R1
ld R2, 4096
add R1, R1, R2
add R2, R9, 4
ld R3, 31
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
or R2, R10, 768
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, 1
stw R1, SP[12]
stw R10, SP[16]
ld R1, OBJ17
add R2, SP, 16
jsr /kprintf(String,Any...)
ld R1, 4096
jsr /allocateBlock(Int)
ld R10, R8
ld R1, -4096
and R1, R10, R1
add R2, R9, 4
ld R3, 29
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
or R2, R10, 768
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, 1
stw R1, SP[20]
stw R10, SP[24]
ld R1, OBJ18
add R2, SP, 24
jsr /kprintf(String,Any...)
ld R1, /endTask()
add R2, R9, 4
ld R3, 30
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
ldw R1, R29[12]
ld R2, R9
jsr /List/add(T)
ldw R1, R29[16]
ld R2, R9
jsr /List/add(T)
ld R8, R9
ldw R9, SP[28]
ldw R10, SP[32]
ldw R11, SP[36]
ldw R30, SP[40]
add SP, SP, 44
ret

/findTaskByName(String):
# name = R9
# V35 = R12
# task = R13
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R9, R1
ldw R10, R29[12]
ldw R11, R10[0]
ld R12, 0
jmp .L3
.L1:
ld R1, R10
ld R2, R12
jsr /List/get(Int)
ld R13, R8
ldw R1, R13[168]
ld R2, R9
jsr /strequal
bne R8, 0, .L6
jmp .L5
.L6:
ld R8, R13
jmp .L0
.L5:
add R12, R12, 1
.L3:
blt R12, R11, .L1
ld R8, 0
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/startup():
# taskCode = R8
# wdd = R1
sub SP, SP, 24
stw R9, SP[16]
stw R30, SP[20]
ld R1, 0
stw R1, SP[0]
ld R1, OBJ19
add R2, SP, 4
jsr /kprintf(String,Any...)
jsr /initializeMemorySystem()
jsr /initializeBuddyAllocator()
ld R1, 0
stw R1, R29[20]
ld R1, 0
stw R1, R29[24]
ld R1, 0
stw R1, R29[28]
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R9, R8
ld R1, R9
jsr /List
stw R9, R29[12]
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R9, R8
ld R1, R9
jsr /List
stw R9, R29[16]
ld R1, WindowManager/class
jsr /mallocObject(ClassDescriptor)
ld R9, R8
ld R1, R9
jsr /WindowManager
stw R9, R29[32]
ld R1, 1
stw R1, SP[4]
ldw R1, R29[32]
stw R1, SP[8]
ld R1, OBJ20
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R2, OBJ21
ld R3, 0
ld R4, 0
ld R5, 320
ld R6, 200
ldw R1, R29[32]
jsr /WindowManager/newWindow(String,Int,Int,Int,Int)
ld R1, 0
stw R1, SP[12]
ld R1, OBJ22
add R2, SP, 16
jsr /kprintf(String,Any...)
ld R1, OBJ23
jsr /readFileFromHost(String)
ld R1, 0
bne R8, R1, .L2
jmp .L1
.L2:
ld R1, OBJ24
ld R2, R8
jsr /createTask(String,Int)
.L1:
jsr /scheduler()
ldw R9, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/scheduler():
# task = R9
# timeSinceLastSwitch = R1
sub SP, SP, 20
stw R9, SP[12]
stw R30, SP[16]
ldw R1, R29[32]
jsr /WindowManager/checkForEvents()
ldw R1, R29[16]
ldw R1, R1[0]
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
ld R1, 0
stw R1, SP[0]
ld R1, OBJ25
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, 10
jsr /shutdown(ErrorCode)
.L1:
ld R1, -536870912
ldw R1, R1[72]
ldw R2, R29[24]
sub R1, R1, R2
ldw R2, R29[28]
bne R2, 0, .L5
ld R2, 1000000
blt R2, R1, .L5
jmp .L4
.L5:
ldw R1, R29[20]
add R1, R1, 1
stw R1, R29[20]
ld R1, -536870912
ldw R1, R1[72]
stw R1, R29[24]
ld R1, 0
stw R1, R29[28]
.L4:
ldw R1, R29[20]
ldw R2, R29[16]
ldw R2, R2[0]
bge R1, R2, .L9
jmp .L8
.L9:
ld R1, 0
stw R1, R29[20]
.L8:
ldw R2, R29[20]
ldw R1, R29[16]
jsr /List/get(Int)
ld R9, R8
ld R1, -536870912
stw R9, R1[0]
ldw R1, R9[172]
ld R2, 1
bne R1, R2, .L12
jmp .L11
.L12:
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ26
add R2, SP, 8
jsr /kprintf(String,Any...)
.L11:
ld R1, 0
stw R1, R9[172]
ld R1, R9
jsr /resumeTask(TaskControlBlock)
ldw R9, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/terminateTask(TaskControlBlock,String,Int):
# message = R2
# tcb = R9
# data = R1
sub SP, SP, 20
stw R9, SP[12]
stw R30, SP[16]
ld R9, R1
ld R1, 2
stw R1, SP[0]
ldw R1, R9[168]
stw R1, SP[4]
stw R2, SP[8]
ld R1, OBJ27
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, R9
jsr /TaskControlBlock/dump()
ldw R1, R29[16]
ld R2, R9
jsr /List/remove(T)
ldw R9, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/handle_exception(TaskControlBlock,ExceptionCause,Int):
# task = R8
# msg = R2
# msg = R8
# tcb = R9
# data = R10
# dest = R10
# cause = R11
# block = R10
# userMessage = R10
# name = R1
sub SP, SP, 68
stw R9, SP[52]
stw R10, SP[56]
stw R11, SP[60]
stw R30, SP[64]
ld R9, R1
ld R11, R2
ld R10, R3
ld R1, 0
beq R9, R1, .L2
jmp .L1
.L2:
ld R1, 3
stw R1, SP[0]
ldw R1, R9[0]
stw R1, SP[4]
stw R11, SP[8]
stw R10, SP[12]
ld R1, OBJ28
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, OBJ29
ld R2, 9
jsr /panic(String,ErrorCode)
.L1:
ld R1, 1
stw R1, R9[172]
ld R1, 8
beq R11, R1, .L5
ld R1, 1
beq R11, R1, .L6
ld R1, 2
beq R11, R1, .L7
ld R1, 3
beq R11, R1, .L8
ld R1, 4
beq R11, R1, .L9
ld R1, 5
beq R11, R1, .L10
ld R1, 6
beq R11, R1, .L11
ld R1, 7
beq R11, R1, .L12
ld R1, 9
beq R11, R1, .L13
jmp .L14
jmp .L4
.L5:
ld R1, 0
beq R10, R1, .L16
ld R1, 1
beq R10, R1, .L17
ld R1, 2
beq R10, R1, .L18
ld R1, 3
beq R10, R1, .L19
ld R1, 4
beq R10, R1, .L20
ld R1, 5
beq R10, R1, .L21
ld R1, 6
beq R10, R1, .L22
ld R1, 7
beq R10, R1, .L23
ld R1, 8
beq R10, R1, .L24
jmp .L25
jmp .L15
.L16:
ld R1, 2
stw R1, SP[16]
ldw R1, R9[168]
stw R1, SP[20]
add R1, R9, 4
ld R2, 8
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
stw R1, SP[24]
ld R1, OBJ30
add R2, SP, 20
jsr /kprintf(String,Any...)
ld R2, OBJ31
ld R3, 0
ld R1, R9
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L15
.L17:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
jsr /printChar(Char)
jmp .L15
.L18:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
add R2, R9, 4
ld R3, 2
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
ldw R2, R2[0]
jsr /kPrintBlock(Array<Char>,Int)
jmp .L15
.L19:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
jsr /allocateBlock(Int)
ld R10, R8
ld R1, 0
beq R10, R1, .L27
jmp .L26
.L27:
ld R1, R9
jsr /TaskControlBlock/dump()
ld R1, OBJ32
ld R2, 1
jsr /panic(String,ErrorCode)
.L26:
ld R1, 2
stw R1, SP[28]
stw R10, SP[32]
stw R9, SP[36]
ld R1, OBJ33
add R2, SP, 32
jsr /kprintf(String,Any...)
or R2, R10, 768
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, -4096
and R1, R10, R1
add R2, R9, 4
ld R3, 8
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
jmp .L15
.L20:
ld R1, 0
stw R1, SP[40]
ld R1, OBJ34
add R2, SP, 44
jsr /kprintf(String,Any...)
jmp .L15
.L21:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
jsr /findTaskByName(String)
add R1, R9, 4
ld R2, 8
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
stw R8, R1[0]
jmp .L15
.L22:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R10, R1[0]
ldw R1, R29[12]
ld R2, R10
jsr /List/contains(T)
bne R8, 0, .L30
jmp .L32
.L30:
ld R1, Message/class
jsr /mallocObject(ClassDescriptor)
ld R11, R8
add R1, R9, 4
ld R2, 2
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R3, R1[0]
add R1, R9, 4
ld R2, 3
ld R4, 32
idx4 R2, R2, R4
add R1, R1, R2
ldw R4, R1[0]
add R1, R9, 4
ld R2, 4
ld R5, 32
idx4 R2, R2, R5
add R1, R1, R2
ldw R5, R1[0]
add R1, R9, 4
ld R2, 5
ld R6, 32
idx4 R2, R2, R6
add R1, R1, R2
ldw R6, R1[0]
ld R1, R11
ld R2, R9
jsr /Message
ld R2, R11
ld R1, R10
jsr /TaskControlBlock/receiveMessage(Message)
ld R1, 1
add R2, R9, 4
ld R3, 8
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
jmp .L29
.L32:
ld R1, 1
stw R1, SP[44]
ldw R1, R10[168]
stw R1, SP[48]
ld R1, OBJ35
add R2, SP, 48
jsr /kprintf(String,Any...)
ld R1, 0
add R2, R9, 4
ld R3, 8
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
.L29:
jmp .L15
.L23:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R10, R1[0]
ld R1, R9
jsr /TaskControlBlock/getMessage()
ld R1, 0
beq R8, R1, .L34
jmp .L36
.L34:
ldw R1, R9[0]
sub R1, R1, 4
stw R1, R9[0]
jmp .L33
.L36:
ldw R1, R8[0]
stw R1, R10[0]
ldw R1, R8[4]
stw R1, R10[4]
ldw R1, R8[8]
stw R1, R10[8]
ldw R1, R8[12]
stw R1, R10[12]
ldw R1, R8[16]
stw R1, R10[16]
beq R8, 0, .L37
ld R1, R8
jsr /free(Int)
.L37:
.L33:
jmp .L15
.L24:
ld R1, 1
stw R1, R29[28]
jmp .L15
.L25:
ld R2, OBJ36
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
.L15:
jmp .L4
.L6:
ld R2, OBJ37
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L7:
ld R2, OBJ38
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L8:
ld R2, OBJ39
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L9:
ld R2, OBJ40
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L10:
ld R2, OBJ41
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L11:
ld R2, OBJ42
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L12:
ld R2, OBJ43
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L13:
ld R2, OBJ44
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
jmp .L4
.L14:
ld R2, OBJ45
ld R1, R9
ld R3, R10
jsr /terminateTask(TaskControlBlock,String,Int)
.L4:
ldw R1, R9[0]
add R1, R1, 4
stw R1, R9[0]
jsr /scheduler()
ldw R9, SP[52]
ldw R10, SP[56]
ldw R11, SP[60]
ldw R30, SP[64]
add SP, SP, 68
ret

/setBlitDestWindow(Window):
# window = R1
stw R1, R29[40]
ldw R2, R1[24]
ld R3, -536862720
stw R2, R3[4]
ldw R2, R1[28]
ld R3, -536862720
stw R2, R3[8]
ldw R2, R1[8]
ld R3, -536862720
stw R2, R3[12]
ld R2, 129
ld R3, -536862720
stw R2, R3[0]
ldw R2, R1[28]
ld R3, -536862720
stw R2, R3[4]
ldw R1, R1[32]
ld R2, -536862720
stw R1, R2[8]
ld R1, 130
ld R2, -536862720
stw R1, R2[0]
ret

/drawLine(Int,Int,Int,Int,Int):
# x1 = R1
# y1 = R2
# x2 = R3
# y2 = R4
# color = R5
lsl R2, R2, 16
or R1, R2, R1
ld R2, -536862720
stw R1, R2[4]
lsl R1, R4, 16
or R1, R1, R3
ld R2, -536862720
stw R1, R2[8]
ld R1, -536862720
stw R5, R1[12]
ld R1, 2
ld R2, -536862720
stw R1, R2[0]
ret

/drawRect(Int,Int,Int,Int,Int):
# x1 = R1
# y1 = R2
# x2 = R3
# y2 = R4
# color = R5
lsl R2, R2, 16
or R1, R2, R1
ld R2, -536862720
stw R1, R2[4]
lsl R1, R4, 16
or R1, R1, R3
ld R2, -536862720
stw R1, R2[8]
ld R1, -536862720
stw R5, R1[12]
ld R1, 1
ld R2, -536862720
stw R1, R2[0]
ret

/GfxCommandBlock/run():
# this = R9
# cmd = R1
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ld R1, -536862720
ldw R1, R1[0]
ld R2, 10
blt R1, R2, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R1, R29[40]
ldw R2, R9[4]
bne R1, R2, .L5
jmp .L4
.L5:
ldw R1, R9[4]
jsr /setBlitDestWindow(Window)
.L4:
jmp .L9
.L7:
ldw R1, R9[16]
ldw R2, R9[12]
bge R1, R2, .L11
jmp .L10
.L11:
ld R8, 1
jmp .L0
.L10:
ld R1, -536862720
ldw R1, R1[0]
ld R2, 2
blt R1, R2, .L14
jmp .L13
.L14:
ld R8, 0
jmp .L0
.L13:
ldw R1, R9[8]
ldw R2, R9[16]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ldw R2, R9[16]
add R2, R2, 1
stw R2, R9[16]
ld R2, 1
beq R1, R2, .L17
ld R2, 2
beq R1, R2, .L18
jmp .L16
.L17:
ldw R1, R9[16]
add R1, R1, 3
ldw R2, R9[12]
bge R1, R2, .L20
jmp .L19
.L20:
ld R8, 0
jmp .L0
.L19:
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 0
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[4]
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 1
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[8]
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 2
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[12]
ld R1, 1
ld R2, -536862720
stw R1, R2[0]
ldw R1, R9[16]
add R1, R1, 3
stw R1, R9[16]
jmp .L16
.L18:
ldw R1, R9[16]
add R1, R1, 3
ldw R2, R9[8]
ldw R2, R2[-4]
bge R1, R2, .L23
jmp .L22
.L23:
ld R8, 0
jmp .L0
.L22:
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 0
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[4]
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 1
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[8]
ldw R1, R9[8]
ldw R2, R9[16]
add R2, R2, 2
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, -536862720
stw R1, R2[12]
ld R1, 2
ld R2, -536862720
stw R1, R2[0]
ldw R1, R9[16]
add R1, R1, 3
stw R1, R9[16]
.L16:
.L9:
ld R1, 1
bne R1, 0, .L7
.L0:
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/Window/updateLayerHardware():
# this = R9
# layer = R10
sub SP, SP, 40
stw R9, SP[28]
stw R10, SP[32]
stw R30, SP[36]
ld R9, R1
ld R1, -536866816
ldw R2, R9[20]
mul R2, R2, 32
add R10, R1, R2
ld R1, 6
stw R1, SP[0]
ldw R1, R9[20]
stw R1, SP[4]
ldw R1, R9[24]
stw R1, SP[8]
ldw R1, R9[0]
stw R1, SP[12]
ldw R1, R9[4]
stw R1, SP[16]
ldw R1, R9[0]
ldw R2, R9[8]
add R1, R1, R2
stw R1, SP[20]
ldw R1, R9[4]
ldw R2, R9[12]
add R1, R1, R2
stw R1, SP[24]
ld R1, OBJ46
add R2, SP, 4
jsr /kprintf(String,Any...)
ldw R1, R9[24]
stw R1, R10[0]
ldw R1, R9[0]
stw R1, R10[4]
ldw R1, R9[4]
stw R1, R10[8]
ldw R1, R9[0]
ldw R2, R9[8]
add R1, R1, R2
stw R1, R10[12]
ldw R1, R9[4]
ldw R2, R9[12]
add R1, R1, R2
stw R1, R10[16]
ldw R1, R9[8]
stw R1, R10[20]
ld R1, 1
stw R1, R10[24]
ldw R9, SP[28]
ldw R10, SP[32]
ldw R30, SP[36]
add SP, SP, 40
ret

/Window/drawBorders(Bool):
# titleColor = R5
# this = R9
# V35 = R5
# borderColor = R10
# active = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R10, R2
ld R1, R9
jsr /setBlitDestWindow(Window)
bne R10, 0, .L1
jmp .L2
.L1:
ld R5, 15
jmp .L3
.L2:
ld R5, 0
.L3:
ld R10, 255
ld R1, 0
ld R2, 0
ldw R3, R9[8]
ld R4, 16
jsr /drawRect(Int,Int,Int,Int,Int)
ld R1, 0
ld R2, 0
ldw R3, R9[8]
sub R3, R3, 1
ld R4, 0
ld R5, R10
jsr /drawLine(Int,Int,Int,Int,Int)
ld R1, 0
ld R2, 0
ld R3, 0
ldw R4, R9[12]
sub R4, R4, 1
ld R5, R10
jsr /drawLine(Int,Int,Int,Int,Int)
ld R1, R9
jsr /setBlitDestWindow(Window)
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/Window/move(Int,Int):
# this = R1
# newX = R2
# newY = R3
sub SP, SP, 4
stw R30, SP[0]
ldw R4, R1[0]
beq R4, R2, .L4
jmp .L3
.L4:
ldw R4, R1[4]
beq R4, R3, .L2
.L3:
jmp .L1
.L2:
jmp .L0
.L1:
ld R4, 0
blt R4, R2, .L8
jmp .L7
.L8:
ld R4, 640
blt R2, R4, .L6
.L7:
jmp .L5
.L6:
stw R2, R1[0]
.L5:
ld R2, 0
blt R2, R3, .L12
jmp .L11
.L12:
ld R2, 480
blt R3, R2, .L10
.L11:
jmp .L9
.L10:
stw R3, R1[4]
.L9:
jsr /Window/updateLayerHardware()
.L0:
ldw R30, SP[0]
add SP, SP, 4
ret

/WindowManager/newWindow(String,Int,Int,Int,Int):
# this = R9
# x = R10
# y = R11
# wdw = R12
# title = R13
# width = R14
# height = R15
sub SP, SP, 48
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R12, SP[28]
stw R13, SP[32]
stw R14, SP[36]
stw R15, SP[40]
stw R30, SP[44]
ld R9, R1
ld R13, R2
ld R10, R3
ld R11, R4
ld R14, R5
ld R15, R6
ld R1, Window/class
jsr /mallocObject(ClassDescriptor)
ld R12, R8
ldw R1, R9[0]
ldw R7, R1[0]
ld R1, R12
ld R2, R10
ld R3, R11
ld R4, R14
ld R5, R15
ld R6, R13
jsr /Window
ldw R1, R9[0]
ld R2, R12
jsr /List/add(T)
ld R1, 2
stw R1, SP[0]
stw R10, SP[4]
stw R11, SP[8]
ld R1, OBJ47
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, R12
jsr /Window/updateLayerHardware()
ld R1, R9
ld R2, R12
jsr /WindowManager/setActiveWindow(Window?)
ld R1, 0
stw R1, SP[12]
ld R1, OBJ48
add R2, SP, 16
jsr /kprintf(String,Any...)
ld R8, R12
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R12, SP[28]
ldw R13, SP[32]
ldw R14, SP[36]
ldw R15, SP[40]
ldw R30, SP[44]
add SP, SP, 48
ret

/WindowManager/getWindowAt(Int,Int):
# this = R1
# wdw = R8
# x = R9
# y = R10
# ret = R11
# V39 = R14
sub SP, SP, 28
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R30, SP[24]
ld R9, R2
ld R10, R3
ld R11, 0
ldw R12, R1[0]
ldw R13, R12[0]
ld R14, 0
jmp .L3
.L1:
ld R1, R12
ld R2, R14
jsr /List/get(Int)
ldw R1, R8[0]
bge R9, R1, .L10
jmp .L7
.L10:
ldw R1, R8[0]
ldw R2, R8[8]
add R1, R1, R2
blt R9, R1, .L9
jmp .L7
.L9:
ldw R1, R8[4]
bge R10, R1, .L8
jmp .L7
.L8:
ldw R1, R8[4]
ldw R2, R8[12]
add R1, R1, R2
blt R10, R1, .L6
.L7:
jmp .L5
.L6:
ld R11, R8
.L5:
add R14, R14, 1
.L3:
blt R14, R13, .L1
ld R8, R11
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R30, SP[24]
add SP, SP, 28
ret

/WindowManager/checkForEvents():
# dw = R1
# wdw = R8
# this = R9
# mouse_btn = R10
# mouse_y = R11
# mouse_x = R12
# wdw = R13
# hwRegs = R1
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R9, R1
ld R1, -536870912
ldw R12, R1[40]
ldw R11, R1[44]
ldw R10, R1[48]
ldw R1, R9[12]
ld R2, 0
bne R1, R2, .L2
jmp .L4
.L2:
ld R2, 0
beq R10, R2, .L6
jmp .L8
.L6:
ld R1, 0
stw R1, R9[12]
jmp .L5
.L8:
ldw R2, R9[16]
sub R2, R12, R2
ldw R3, R9[20]
sub R3, R11, R3
jsr /Window/move(Int,Int)
.L5:
jmp .L1
.L4:
ld R1, 1
beq R10, R1, .L12
jmp .L11
.L12:
ldw R1, R9[4]
ld R2, 0
beq R1, R2, .L10
.L11:
jmp .L13
.L10:
ld R1, R9
ld R2, R12
ld R3, R11
jsr /WindowManager/getWindowAt(Int,Int)
ld R13, R8
ld R1, R9
ld R2, R13
jsr /WindowManager/setActiveWindow(Window?)
ld R1, 0
bne R13, R1, .L15
jmp .L14
.L15:
ld R1, R9
ld R2, R13
jsr /WindowManager/moveToFront(Window)
ldw R1, R13[0]
sub R1, R12, R1
stw R1, R9[16]
ldw R1, R13[4]
sub R1, R11, R1
stw R1, R9[20]
ldw R1, R9[20]
ld R2, 16
blt R1, R2, .L18
jmp .L17
.L18:
stw R13, R9[12]
.L17:
.L14:
jmp .L9
.L13:
ld R1, 4
beq R10, R1, .L23
jmp .L22
.L23:
ldw R1, R9[4]
ld R2, 0
beq R1, R2, .L21
.L22:
jmp .L20
.L21:
ld R1, R9
ld R2, R12
ld R3, R11
jsr /WindowManager/getWindowAt(Int,Int)
ld R1, 0
bne R8, R1, .L27
jmp .L26
.L27:
ldw R1, R8[4]
sub R1, R11, R1
ld R2, 16
blt R1, R2, .L25
.L26:
jmp .L24
.L25:
ld R1, R9
ld R2, R8
jsr /WindowManager/moveToBack(Window)
.L24:
.L20:
.L9:
.L1:
stw R10, R9[4]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/WindowManager/setActiveWindow(Window?):
# this = R1
# wdw = R8
# active = R9
# V37 = R12
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R2
ldw R2, R1[8]
beq R2, R9, .L2
jmp .L1
.L2:
jmp .L0
.L1:
stw R9, R1[8]
ldw R10, R1[0]
ldw R11, R10[0]
ld R12, 0
jmp .L6
.L4:
ld R1, R10
ld R2, R12
jsr /List/get(Int)
xor R2, R8, R9
cltu R2, R2, 1
ld R1, R8
jsr /Window/drawBorders(Bool)
add R12, R12, 1
.L6:
blt R12, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/WindowManager/moveToFront(Window):
# this = R9
# i = R10
# wdw = R10
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
jsr /List/last()
beq R8, R10, .L2
jmp .L1
.L2:
jmp .L0
.L1:
ldw R1, R9[0]
ld R2, R10
jsr /List/remove(T)
ldw R1, R9[0]
ld R2, R10
jsr /List/add(T)
ld R10, 0
ldw R1, R9[0]
ldw R11, R1[0]
jmp .L7
.L4:
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
stw R10, R8[20]
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
ld R1, R8
jsr /Window/updateLayerHardware()
add R10, R10, 1
.L7:
blt R10, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/WindowManager/moveToBack(Window):
# this = R9
# i = R10
# wdw = R10
# packetCommand = R1
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
jsr /List/first()
beq R8, R10, .L2
jmp .L1
.L2:
jmp .L0
.L1:
ldw R1, R9[0]
ld R2, R10
jsr /List/remove(T)
ld R2, 0
ldw R1, R9[0]
ld R3, R10
jsr /List/addAt(Int,T)
ld R10, 0
ldw R1, R9[0]
ldw R11, R1[0]
jmp .L7
.L4:
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
stw R10, R8[20]
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
ld R1, R8
jsr /Window/updateLayerHardware()
add R10, R10, 1
.L7:
blt R10, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/uartSendByte(Int):
# b = R1
# timeout = R2
ld R2, 1000000
jmp .L3
.L1:
sub R2, R2, 1
ld R3, 0
beq R2, R3, .L5
jmp .L4
.L5:
ld R1, 6
stw R1, R29[0]
jmp .L0
.L4:
.L3:
ld R3, -536870912
ldw R3, R3[16]
ld R4, 0
beq R3, R4, .L1
ld R2, -536870912
stw R1, R2[16]
.L0:
ret

/uartSendWord(Int):
# w = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
lsr R1, R9, 0
and R1, R1, 255
jsr /uartSendByte(Int)
lsr R1, R9, 8
and R1, R1, 255
jsr /uartSendByte(Int)
lsr R1, R9, 16
and R1, R1, 255
jsr /uartSendByte(Int)
lsr R1, R9, 24
and R1, R1, 255
jsr /uartSendByte(Int)
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/uartRxByte():
# timeout = R1
# ret = R2
ld R1, 100000
.L1:
ld R2, -536870912
ldw R2, R2[20]
ld R3, -1
bne R2, R3, .L5
jmp .L4
.L5:
and R8, R2, 255
jmp .L0
.L4:
sub R1, R1, 1
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
ld R1, 6
stw R1, R29[0]
ld R8, 0
.L0:
ret

/uartRxWord():
# ret = R8
# b0 = R1
# b3 = R2
# b2 = R3
# b1 = R4
# timeout = R5
ld R5, 100000
ld R1, -1
ld R4, -1
ld R3, -1
ld R2, -1
ld R5, 100000
jmp .L3
.L1:
ld R1, -536870912
ldw R1, R1[20]
sub R5, R5, 1
ld R6, 0
beq R5, R6, .L5
jmp .L4
.L5:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L4:
.L3:
ld R6, -1
beq R1, R6, .L1
ld R5, 100000
jmp .L9
.L7:
ld R4, -536870912
ldw R4, R4[20]
sub R5, R5, 1
ld R6, 0
beq R5, R6, .L11
jmp .L10
.L11:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L10:
.L9:
ld R6, -1
beq R4, R6, .L7
ld R5, 100000
jmp .L15
.L13:
ld R3, -536870912
ldw R3, R3[20]
sub R5, R5, 1
ld R6, 0
beq R5, R6, .L17
jmp .L16
.L17:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L16:
.L15:
ld R6, -1
beq R3, R6, .L13
ld R5, 100000
jmp .L21
.L19:
ld R2, -536870912
ldw R2, R2[20]
sub R5, R5, 1
ld R6, 0
beq R5, R6, .L23
jmp .L22
.L23:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L22:
.L21:
ld R6, -1
beq R2, R6, .L19
lsl R4, R4, 8
or R1, R1, R4
lsl R3, R3, 16
or R1, R1, R3
lsl R2, R2, 24
or R8, R1, R2
.L0:
ret

/uartRxCommandWord():
# ret = R8
# b3 = R9
# b0 = R10
# b2 = R11
# b1 = R12
# timeout = R13
# repeatCount = R14
sub SP, SP, 40
stw R9, SP[12]
stw R10, SP[16]
stw R11, SP[20]
stw R12, SP[24]
stw R13, SP[28]
stw R14, SP[32]
stw R30, SP[36]
ld R13, 100000
ld R10, -1
ld R12, -1
ld R11, -1
ld R9, -1
ld R13, 100000
ld R14, 0
ld R1, 0
stw R1, SP[0]
ld R1, OBJ49
add R2, SP, 4
jsr /kprintf(String,Any...)
jmp .L3
.L1:
ld R10, -1
ld R13, 100000
jmp .L6
.L4:
ld R1, -536870912
ldw R10, R1[20]
ld R1, -1
bne R10, R1, .L8
jmp .L7
.L8:
ld R1, 1
stw R1, SP[4]
stw R10, SP[8]
ld R1, OBJ50
add R2, SP, 8
jsr /kprintf(String,Any...)
.L7:
sub R13, R13, 1
ld R1, 0
beq R13, R1, .L11
jmp .L10
.L11:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L10:
.L6:
ld R1, -1
beq R10, R1, .L4
add R14, R14, 1
ld R1, 100
beq R14, R1, .L14
jmp .L13
.L14:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L13:
.L3:
ld R1, 176
bne R10, R1, .L1
ld R13, 100000
jmp .L18
.L16:
ld R1, -536870912
ldw R12, R1[20]
sub R13, R13, 1
ld R1, 0
beq R13, R1, .L20
jmp .L19
.L20:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L19:
.L18:
ld R1, -1
beq R12, R1, .L16
ld R13, 100000
jmp .L24
.L22:
ld R1, -536870912
ldw R11, R1[20]
sub R13, R13, 1
ld R1, 0
beq R13, R1, .L26
jmp .L25
.L26:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L25:
.L24:
ld R1, -1
beq R11, R1, .L22
ld R13, 100000
jmp .L30
.L28:
ld R1, -536870912
ldw R9, R1[20]
sub R13, R13, 1
ld R1, 0
beq R13, R1, .L32
jmp .L31
.L32:
ld R1, 6
stw R1, R29[0]
ld R8, 0
jmp .L0
.L31:
.L30:
ld R1, -1
beq R9, R1, .L28
lsl R1, R12, 8
or R1, R10, R1
lsl R2, R11, 16
or R1, R1, R2
lsl R2, R9, 24
or R8, R1, R2
.L0:
ldw R9, SP[12]
ldw R10, SP[16]
ldw R11, SP[20]
ldw R12, SP[24]
ldw R13, SP[28]
ldw R14, SP[32]
ldw R30, SP[36]
add SP, SP, 40
ret

/rxPacket():
# b = R8
# crc_rx = R8
# length = R9
# data = R10
# crc = R11
# dataArray = R12
# i = R13
sub SP, SP, 68
stw R9, SP[44]
stw R10, SP[48]
stw R11, SP[52]
stw R12, SP[56]
stw R13, SP[60]
stw R30, SP[64]
ld R1, 0
stw R1, R29[0]
jsr /uartRxCommandWord()
stw R8, R29[52]
ldw R1, R29[0]
ld R2, 0
bne R1, R2, .L2
jmp .L1
.L2:
ld R1, 0
stw R1, SP[0]
ld R1, OBJ51
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L1:
jsr /uartRxWord()
ld R9, R8
ldw R1, R29[0]
ld R2, 0
bne R1, R2, .L5
jmp .L4
.L5:
ld R1, 0
stw R1, SP[4]
ld R1, OBJ52
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L4:
mul R1, R9, 4
jsr /allocateBlock(Int)
ld R10, R8
ld R1, -4096
and R12, R10, R1
ld R11, 0
ld R13, 0
jmp .L10
.L7:
jsr /uartRxWord()
ldw R1, R29[0]
ld R2, 0
bne R1, R2, .L12
jmp .L11
.L12:
ld R1, 1
stw R1, SP[8]
stw R13, SP[12]
ld R1, OBJ53
add R2, SP, 12
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L11:
ldw R1, R12[-4]
mul R1, R13, 4
add R1, R12, R1
stw R8, R1[0]
add R11, R11, R8
add R13, R13, 1
.L10:
blt R13, R9, .L7
jsr /uartRxWord()
ldw R1, R29[0]
ld R2, 0
bne R1, R2, .L15
jmp .L14
.L15:
ld R1, 0
stw R1, SP[16]
ld R1, OBJ54
add R2, SP, 20
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L14:
bne R11, R8, .L18
jmp .L17
.L18:
ld R1, 2
stw R1, SP[20]
stw R11, SP[24]
stw R8, SP[28]
ld R1, OBJ55
add R2, SP, 24
jsr /kprintf(String,Any...)
ld R1, 7
stw R1, R29[0]
ld R8, 0
jmp .L0
.L17:
ld R1, 2
stw R1, SP[32]
stw R9, SP[36]
stw R10, SP[40]
ld R1, OBJ56
add R2, SP, 36
jsr /kprintf(String,Any...)
ld R8, R10
.L0:
ldw R9, SP[44]
ldw R10, SP[48]
ldw R11, SP[52]
ldw R12, SP[56]
ldw R13, SP[60]
ldw R30, SP[64]
add SP, SP, 68
ret

/sendPacketString(Int,String):
# command = R1
# data = R9
# stringLength = R10
# crc = R11
# k = R12
# length = R13
# i = R14
# b0 = R1
# V49 = R1
# b1 = R2
# V61 = R2
# b2 = R3
# V73 = R3
# b3 = R4
# V85 = R4
# word = R15
sub SP, SP, 32
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R15, SP[24]
stw R30, SP[28]
ld R9, R2
ldw R10, R9[-4]
add R2, R10, 4
divs R13, R2, 4
jsr /uartSendWord(Int)
ld R1, R13
jsr /uartSendWord(Int)
ld R14, 0
ld R11, 0
ld R12, 0
jmp .L4
.L1:
blt R14, R10, .L5
jmp .L6
.L5:
ldw R1, R9[-4]
idx1 R1, R14, R1
add R1, R9, R1
ldb R1, R1[0]
and R1, R1, 255
jmp .L7
.L6:
ld R1, 0
.L7:
add R14, R14, 1
blt R14, R10, .L8
jmp .L9
.L8:
ldw R2, R9[-4]
idx1 R2, R14, R2
add R2, R9, R2
ldb R2, R2[0]
and R2, R2, 255
jmp .L10
.L9:
ld R2, 0
.L10:
add R14, R14, 1
blt R14, R10, .L11
jmp .L12
.L11:
ldw R3, R9[-4]
idx1 R3, R14, R3
add R3, R9, R3
ldb R3, R3[0]
and R3, R3, 255
jmp .L13
.L12:
ld R3, 0
.L13:
add R14, R14, 1
blt R14, R10, .L14
jmp .L15
.L14:
ldw R4, R9[-4]
idx1 R4, R14, R4
add R4, R9, R4
ldb R4, R4[0]
and R4, R4, 255
jmp .L16
.L15:
ld R4, 0
.L16:
add R14, R14, 1
lsl R2, R2, 8
or R1, R1, R2
lsl R2, R3, 16
or R1, R1, R2
lsl R2, R4, 24
or R15, R1, R2
ld R1, R15
jsr /uartSendWord(Int)
add R11, R11, R15
add R12, R12, 1
.L4:
blt R12, R13, .L1
ld R1, R11
jsr /uartSendWord(Int)
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R15, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/readFileFromHost(String):
# fileName = R2
# packet = R8
sub SP, SP, 16
stw R30, SP[12]
ld R2, R1
ld R1, 66224
jsr /sendPacketString(Int,String)
jsr /rxPacket()
ldw R1, R29[0]
ld R2, 0
bne R1, R2, .L2
jmp .L1
.L2:
ld R1, 0
stw R1, SP[0]
ld R1, OBJ57
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R8, 0
jmp .L0
.L1:
ldw R1, R29[52]
ld R2, 131760
bne R1, R2, .L5
jmp .L4
.L5:
ld R1, 1
stw R1, SP[4]
ldw R1, R29[52]
stw R1, SP[8]
ld R1, OBJ58
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R1, 8
stw R1, R29[0]
ld R8, 0
jmp .L0
.L4:
.L0:
ldw R30, SP[12]
add SP, SP, 16
ret

/List:
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ld R1, 0
stw R1, R9[0]
ld R1, 8
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/HwRegs:
# this = R1
ret

/FreeMemBlock:
# this = R1
ret

/ArrayMemBlock:
# this = R1
ret

/ObjectMemBlock:
# this = R1
ret

/ClassDescriptor:
# this = R1
# freeList = R1
ret

/TaskControlBlock:
# this = R9
# V36 = R2
# V42 = R2
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R1, 0
stw R1, R9[0]
add R2, R9, 4
add R1, R2, 128
.L1:
stw 0, R2[0]
add R2, R2, 4
blt R2, R1, .L1
ld R1, 0
stw R1, R9[132]
add R2, R9, 136
add R1, R2, 32
.L2:
stw 0, R2[0]
add R2, R2, 4
blt R2, R1, .L2
ld R1, 1
stw R1, R9[172]
ld R1, 0
stw R1, R9[176]
ld R1, 0
stw R1, R9[180]
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R10, R8
ld R1, R10
jsr /List
stw R10, R9[192]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/Message:
# this = R1
# from = R2
# data0 = R3
# data1 = R4
# data2 = R5
# data3 = R6
stw R2, R1[0]
stw R3, R1[4]
stw R4, R1[8]
stw R5, R1[12]
stw R6, R1[16]
ld R2, 0
stw R2, R1[20]
ret

/Blitter:
# this = R1
ret

/Font:
# this = R1
# bitmap = R2
# width = R3
# height = R4
# currentFont = R1
# blitDestWindow = R1
# blitSrcWindow = R1
# blitFont = R1
stw R2, R1[0]
stw R3, R1[4]
stw R4, R1[8]
ret

/GfxCommandBlock:
# this = R1
# task = R2
# destWindow = R3
# commands = R4
# size = R5
stw R2, R1[0]
stw R3, R1[4]
stw R4, R1[8]
stw R5, R1[12]
ld R2, 0
stw R2, R1[16]
ld R2, 0
stw R2, R1[20]
ret

/VgaLayerHardware:
# this = R1
ret

/Window:
# x = R2
# y = R3
# title = R6
# layerNumber = R7
# this = R9
# width = R10
# height = R11
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R4
ld R11, R5
stw R2, R9[0]
stw R3, R9[4]
stw R10, R9[8]
stw R11, R9[12]
stw R6, R9[16]
stw R7, R9[20]
mul R1, R10, R11
jsr /allocateBlock(Int)
ld R1, -4096
and R1, R8, R1
stw R1, R9[24]
ld R1, 1048578
stw R1, R9[28]
sub R1, R11, 2
lsl R1, R1, 16
sub R2, R10, 2
or R1, R1, R2
stw R1, R9[32]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/WindowManager:
# this = R9
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R10, R8
ld R1, R10
jsr /List
stw R10, R9[0]
ld R1, 0
stw R1, R9[4]
ld R1, 0
stw R1, R9[8]
ld R1, 0
stw R1, R9[12]
ld R1, 0
stw R1, R9[16]
ld R1, 0
stw R1, R9[20]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

List/class:
dcw 8
dcw OBJ59

HwRegs/class:
dcw 76
dcw OBJ60

FreeMemBlock/class:
dcw 8
dcw OBJ61

ArrayMemBlock/class:
dcw 8
dcw OBJ62

ObjectMemBlock/class:
dcw 8
dcw OBJ63

ClassDescriptor/class:
dcw 8
dcw OBJ64

TaskControlBlock/class:
dcw 196
dcw OBJ65

Message/class:
dcw 24
dcw OBJ66

Blitter/class:
dcw 16
dcw OBJ67

Font/class:
dcw 12
dcw OBJ68

GfxCommandBlock/class:
dcw 24
dcw OBJ69

VgaLayerHardware/class:
dcw 28
dcw OBJ70

Window/class:
dcw 36
dcw OBJ71

WindowManager/class:
dcw 24
dcw OBJ72

dcw 17
OBJ0: # KERNEL PANIC: %s
dcw 1314014539
dcw 1344293957
dcw 1128877633
dcw 1931812922
dcw 10

dcw 13
OBJ1: # Out of memory
dcw 544503119
dcw 1830839919
dcw 1919905125
dcw 121

dcw 11
OBJ2: # Double free
dcw 1651863364
dcw 1713399148
dcw 6645106

dcw 12
OBJ3: # MEMORY DUMP
dcw 1330464077
dcw 1142970706
dcw 173034837

dcw 5
OBJ4: # %08x 
dcw 2016948261
dcw 32

dcw 27
OBJ5: #  Object: Size=%08x t
dcw 1784827680
dcw 980706149
dcw 2053722912
dcw 807746917
dcw 1948284984
dcw 1030058105
dcw 684837

dcw 35
OBJ6: #  Array: Size=%08x Nu
dcw 1920090400
dcw 540703073
dcw 1702521171
dcw 942679357
dcw 1968054392
dcw 1701594477
dcw 1953391981
dcw 807746931
dcw 686136

dcw 27
OBJ7: #  Free: Size=%08x nex
dcw 1701987872
dcw 1394621029
dcw 1030060649
dcw 2016948261
dcw 2019913248
dcw 807746932
dcw 686136

dcw 21
OBJ8: # Buddy allocator dump
dcw 1684305218
dcw 1818304633
dcw 1633906540
dcw 544370548
dcw 1886221668
dcw 10

dcw 9
OBJ9: # Size=%x:-
dcw 1702521171
dcw 980952381
dcw 45

dcw 1
OBJ10: # 
dcw 10

dcw 42
OBJ11: # ERROR: Task %s has t
dcw 1330795077
dcw 1411398226
dcw 543912801
dcw 1746957093
dcw 1948283745
dcw 1830842223
dcw 544829025
dcw 1869440365
dcw 1646295410
dcw 1801678700
dcw 2675

dcw 22
OBJ12: # Too many memory bloc
dcw 544173908
dcw 2037277037
dcw 1835363616
dcw 544830063
dcw 1668246626
dcw 29547

dcw 9
OBJ13: # $PC=%08x 
dcw 1027821604
dcw 2016948261
dcw 32

dcw 9
OBJ14: # $%2d=%08x
dcw 1681007908
dcw 942679357
dcw 120

dcw 1
OBJ15: #  
dcw 32

dcw 29
OBJ16: # Creating new task %s
dcw 1634038339
dcw 1735289204
dcw 2003136032
dcw 1935766560
dcw 1931812971
dcw 544497952
dcw 2016948261
dcw 10

dcw 24
OBJ17: # Allocated Stack at %
dcw 1869376577
dcw 1702125923
dcw 1951604836
dcw 543908705
dcw 622883937
dcw 175650864

dcw 26
OBJ18: # Allocated globals at
dcw 1869376577
dcw 1702125923
dcw 1818697828
dcw 1818321519
dcw 1952522355
dcw 942679328
dcw 2680

dcw 15
OBJ19: # OS Starting up
dcw 1394627407
dcw 1953653108
dcw 543649385
dcw 684149

dcw 21
OBJ20: # windowManager = %08x
dcw 1684957559
dcw 1632466799
dcw 1701273966
dcw 540876914
dcw 2016948261
dcw 10

dcw 8
OBJ21: # MyWindow
dcw 1767340365
dcw 2003788910

dcw 16
OBJ22: # Allocating task
dcw 1869376577
dcw 1769234787
dcw 1948280686
dcw 174814049

dcw 15
OBJ23: # myFirstTask.exe
dcw 1766226285
dcw 1416917874
dcw 778793825
dcw 6649957

dcw 11
OBJ24: # MyFirstTask
dcw 1766226253
dcw 1416917874
dcw 7041889

dcw 16
OBJ25: # No tasks to run
dcw 1948282702
dcw 1936421729
dcw 544175136
dcw 175011186

dcw 51
OBJ26: # ERROR: Task %08x is 
dcw 1330795077
dcw 1411398226
dcw 543912801
dcw 2016948261
dcw 544434464
dcw 1914728047
dcw 1768844917
dcw 1814062958
dcw 745829225
dcw 1953849888
dcw 1953459744
dcw 1634038304
dcw 686436

dcw 23
OBJ27: # Task %s terminated: 
dcw 1802723668
dcw 544417056
dcw 1836213620
dcw 1952542313
dcw 540697701
dcw 684837

dcw 51
OBJ28: # Exception in kernel 
dcw 1701017669
dcw 1869182064
dcw 1852383342
dcw 1919249184
dcw 543974766
dcw 1701080931
dcw 1027821600
dcw 2016948261
dcw 1969308448
dcw 624780659
dcw 1631854712
dcw 624779636
dcw 7878704

dcw 24
OBJ29: # Exception in kernel 
dcw 1701017669
dcw 1869182064
dcw 1852383342
dcw 1919249184
dcw 543974766
dcw 1701080931

dcw 28
OBJ30: # Task %s exited with 
dcw 1802723668
dcw 544417056
dcw 1953069157
dcw 1998611557
dcw 543716457
dcw 1701080931
dcw 174335264

dcw 9
OBJ31: # Completed
dcw 1886220099
dcw 1702126956
dcw 100

dcw 24
OBJ32: # Memory allocation fa
dcw 1869440333
dcw 1629518194
dcw 1668246636
dcw 1869182049
dcw 1634082926
dcw 1684368489

dcw 35
OBJ33: # Allocated block %08x
dcw 1869376577
dcw 1702125923
dcw 1818370148
dcw 543908719
dcw 2016948261
dcw 1919903264
dcw 1935766560
dcw 807739499
dcw 686136

dcw 38
OBJ34: # Not yet implemented:
dcw 544501582
dcw 544499065
dcw 1819307369
dcw 1852140901
dcw 979658100
dcw 1937330976
dcw 1819042147
dcw 1163019808
dcw 1162698565
dcw 2637

dcw 18
OBJ35: # Task %s not found
dcw 1802723668
dcw 544417056
dcw 544501614
dcw 1853189990
dcw 2660

dcw 19
OBJ36: # Unknown system call
dcw 1852534357
dcw 544110447
dcw 1953724787
dcw 1663069541
dcw 7105633

dcw 24
OBJ37: # Instruction Access f
dcw 1953721929
dcw 1952675186
dcw 544108393
dcw 1701012289
dcw 1713402739
dcw 1953264993

dcw 19
OBJ38: # Illegal Instruction
dcw 1701604425
dcw 543973735
dcw 1953721929
dcw 1952675186
dcw 7237481

dcw 10
OBJ39: # Breakpoint
dcw 1634038338
dcw 1768910955
dcw 29806

dcw 23
OBJ40: # Load Address Misalig
dcw 1684107084
dcw 1684291872
dcw 1936942450
dcw 1936280864
dcw 1734962273
dcw 6579566

dcw 18
OBJ41: # Load Address Fault
dcw 1684107084
dcw 1684291872
dcw 1936942450
dcw 1969309216
dcw 29804

dcw 24
OBJ42: # Store Address Misali
dcw 1919906899
dcw 1681989733
dcw 1936028260
dcw 1766662259
dcw 1768710515
dcw 1684368999

dcw 19
OBJ43: # Store Address Fault
dcw 1919906899
dcw 1681989733
dcw 1936028260
dcw 1631985779
dcw 7629941

dcw 14
OBJ44: # Index Overflow
dcw 1701080649
dcw 1984897144
dcw 1818653285
dcw 30575

dcw 17
OBJ45: # Unknown exception
dcw 1852534357
dcw 544110447
dcw 1701017701
dcw 1869182064
dcw 110

dcw 47
OBJ46: # Updating layer hardw
dcw 1633972309
dcw 1735289204
dcw 2036427808
dcw 1746956901
dcw 2003071585
dcw 543519329
dcw 1948279845
dcw 807739503
dcw 622884920
dcw 1680157796
dcw 744760608
dcw 680997

dcw 20
OBJ47: # New window at %d,%d
dcw 544695630
dcw 1684957559
dcw 1629517679
dcw 1680154740
dcw 174335276

dcw 17
OBJ48: # Activated window
dcw 1769235265
dcw 1702125942
dcw 1769414756
dcw 2003788910
dcw 10

dcw 25
OBJ49: # Waiting for command 
dcw 1953063255
dcw 543649385
dcw 544370534
dcw 1835888483
dcw 543452769
dcw 1685221239
dcw 10

dcw 12
OBJ50: # Got byte %x
dcw 544501575
dcw 1702132066
dcw 175645984

dcw 23
OBJ51: # failed to read comma
dcw 1818845542
dcw 1948279909
dcw 1701978223
dcw 1663067233
dcw 1634561391
dcw 681070

dcw 22
OBJ52: # Failed to read lengt
dcw 1818845510
dcw 1948279909
dcw 1701978223
dcw 1814062177
dcw 1952935525
dcw 2664

dcw 23
OBJ53: # Failed to read data 
dcw 1818845510
dcw 1948279909
dcw 1701978223
dcw 1679844449
dcw 543257697
dcw 680997

dcw 19
OBJ54: # Failed to read crc
dcw 1818845510
dcw 1948279909
dcw 1701978223
dcw 1663067233
dcw 680818

dcw 27
OBJ55: # CRC mismatch calc=%x
dcw 541282883
dcw 1836280173
dcw 1751348321
dcw 1818321696
dcw 2015706467
dcw 1031303712
dcw 686117

dcw 30
OBJ56: # Read %d words at add
dcw 1684104530
dcw 543434016
dcw 1685221239
dcw 1952522355
dcw 1684300064
dcw 1936942450
dcw 942679328
dcw 2680

dcw 16
OBJ57: # Packet not read
dcw 1801675088
dcw 1847620709
dcw 1914729583
dcw 174350693

dcw 29
OBJ58: # Expected RESP_DATA, 
dcw 1701869637
dcw 1684370531
dcw 1397051936
dcw 1094999888
dcw 539771220
dcw 544501607
dcw 2016948261
dcw 10

dcw 4
OBJ59: # List
dcw 1953720652

dcw 6
OBJ60: # HwRegs
dcw 1699903304
dcw 29543

dcw 12
OBJ61: # FreeMemBlock
dcw 1701147206
dcw 1114465613
dcw 1801678700

dcw 13
OBJ62: # ArrayMemBlock
dcw 1634890305
dcw 1835355513
dcw 1668246594
dcw 107

dcw 14
OBJ63: # ObjectMemBlock
dcw 1701470799
dcw 1699574883
dcw 1869365869
dcw 27491

dcw 15
OBJ64: # ClassDescriptor
dcw 1935764547
dcw 1936016499
dcw 1885958755
dcw 7499636

dcw 16
OBJ65: # TaskControlBlock
dcw 1802723668
dcw 1953394499
dcw 1114402674
dcw 1801678700

dcw 7
OBJ66: # Message
dcw 1936942413
dcw 6645601

dcw 7
OBJ67: # Blitter
dcw 1953066050
dcw 7497076

dcw 4
OBJ68: # Font
dcw 1953394502

dcw 15
OBJ69: # GfxCommandBlock
dcw 1131963975
dcw 1634561391
dcw 1816290414
dcw 7037807

dcw 16
OBJ70: # VgaLayerHardware
dcw 1281451862
dcw 1919252833
dcw 1685217608
dcw 1701994871

dcw 6
OBJ71: # Window
dcw 1684957527
dcw 30575

dcw 13
OBJ72: # WindowManager
dcw 1684957527
dcw 1632466799
dcw 1701273966
dcw 114

