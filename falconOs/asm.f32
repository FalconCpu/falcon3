# Generated by Falcon Compiler
# Global vars:-
# freeList @ 0
# freeBlocks @ 4
/handle_exception(TaskControlBlock,ExceptionCause,Int):
# tcb = R9
# data = R10
# cause = R11
sub SP, SP, 28
stw R9, SP[12]
stw R10, SP[16]
stw R11, SP[20]
stw R30, SP[24]
ld R9, R1
ld R11, R2
ld R10, R3
ld R1, 2
stw R1, SP[0]
stw R11, SP[4]
stw R10, SP[8]
ld R1, OBJ0
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, 1
beq R11, R1, .L2
ld R1, 2
beq R11, R1, .L3
ld R1, 3
beq R11, R1, .L4
ld R1, 4
beq R11, R1, .L5
ld R1, 5
beq R11, R1, .L6
ld R1, 6
beq R11, R1, .L7
ld R1, 7
beq R11, R1, .L8
ld R1, 8
beq R11, R1, .L9
ld R1, 9
beq R11, R1, .L10
jmp .L11
jmp .L1
.L2:
ld R1, OBJ1
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L3:
ld R1, OBJ2
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L4:
ld R1, OBJ3
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L5:
ld R1, OBJ4
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L6:
ld R1, OBJ5
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L7:
ld R1, OBJ6
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L8:
ld R1, OBJ7
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L9:
ld R1, 0
beq R10, R1, .L13
ld R1, 1
beq R10, R1, .L14
ld R1, 2
beq R10, R1, .L15
jmp .L16
jmp .L12
.L13:
ld R1, OBJ8
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L12
.L14:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
jsr /printChar(Char)
jmp .L12
.L15:
add R1, R9, 4
ld R2, 1
ld R3, 32
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
add R2, R9, 4
ld R3, 2
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
ldw R2, R2[0]
jsr /kPrintBlock(Array<Char>,Int)
jmp .L12
.L16:
ld R1, OBJ9
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
.L12:
jmp .L1
.L10:
ld R1, OBJ10
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
jmp .L1
.L11:
ld R1, OBJ11
ld R2, R11
ld R3, R9
ld R4, R10
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
.L1:
ldw R1, R9[0]
add R1, R1, 4
stw R1, R9[0]
ld R1, R9
jsr /resumeTask(TaskControlBlock)
ldw R9, SP[12]
ldw R10, SP[16]
ldw R11, SP[20]
ldw R30, SP[24]
add SP, SP, 28
ret

/printChar(Char):
# c = R1
# dummy = R1
jmp .L3
.L1:
.L3:
ld R2, -536870912
ldw R2, R2[16]
ld R3, 3
blt R2, R3, .L1
ld R2, -536870912
stw R1, R2[16]
ret

/kprintString(String,Int,Justify):
# width = R2
# justify = R9
# s = R10
# pad = R11
# i = R12
# i = R12
# i = R9
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R10, R1
ld R9, R3
ldw R1, R10[-4]
sub R11, R2, R1
ld R1, 0
bne R9, R1, .L2
jmp .L1
.L2:
ld R12, 0
jmp .L7
.L4:
ld R1, 32
jsr /printChar(Char)
add R12, R12, 1
.L7:
blt R12, R11, .L4
.L1:
ld R12, 0
ldw R13, R10[-4]
jmp .L11
.L8:
ldw R1, R10[-4]
idx1 R1, R12, R1
add R1, R10, R1
ldb R1, R1[0]
jsr /printChar(Char)
add R12, R12, 1
.L11:
blt R12, R13, .L8
ld R1, 0
beq R9, R1, .L13
jmp .L12
.L13:
ld R9, 0
jmp .L18
.L15:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L18:
blt R9, R11, .L15
.L12:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/kprintInt(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# minus = R9
# index = R10
# pad = R11
# i = R9
# i = R9
# i = R9
# i = R12
# i = R9
# i = R9
# V44 = R5
sub SP, SP, 36
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R12, SP[28]
stw R30, SP[32]
ld R9, 0
ld R4, 0
blt R1, R4, .L2
jmp .L1
.L2:
ld R9, 1
ld R4, 0
sub R1, R4, R1
.L1:
add R5, SP, 0
add R4, R5, 16
.L4:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L4
ld R10, 0
.L5:
mods R4, R1, 10
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R10, R6
add R5, R5, R6
stb R4, R5[0]
add R10, R10, 1
divs R1, R1, 10
ld R4, 0
beq R1, R4, .L6
jmp .L5
.L6:
sub R1, R2, R10
sub R11, R1, R9
ld R1, 0
beq R3, R1, .L9
ld R1, 1
beq R3, R1, .L10
jmp .L11
jmp .L8
.L9:
ld R1, 1
beq R9, R1, .L13
jmp .L12
.L13:
ld R1, 45
jsr /printChar(Char)
.L12:
sub R9, R10, 1
ld R10, 0
jmp .L18
.L15:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L18:
bge R9, R10, .L15
ld R9, 0
jmp .L22
.L19:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L22:
blt R9, R11, .L19
jmp .L8
.L10:
ld R12, 0
jmp .L26
.L23:
ld R1, 32
jsr /printChar(Char)
add R12, R12, 1
.L26:
blt R12, R11, .L23
ld R1, 1
beq R9, R1, .L28
jmp .L27
.L28:
ld R1, 45
jsr /printChar(Char)
.L27:
sub R9, R10, 1
ld R10, 0
jmp .L33
.L30:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L33:
bge R9, R10, .L30
jmp .L8
.L11:
ld R1, 1
beq R9, R1, .L35
jmp .L34
.L35:
ld R1, 45
jsr /printChar(Char)
.L34:
ld R9, 0
jmp .L40
.L37:
ld R1, 48
jsr /printChar(Char)
add R9, R9, 1
.L40:
blt R9, R11, .L37
sub R9, R10, 1
ld R10, 0
jmp .L44
.L41:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L44:
bge R9, R10, .L41
.L8:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R12, SP[28]
ldw R30, SP[32]
add SP, SP, 36
ret

/kprintHex(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# index = R9
# pad = R10
# i = R9
# i = R9
# i = R9
# i = R11
# i = R11
# i = R9
# V38 = R5
# digit = R4
sub SP, SP, 32
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R30, SP[28]
add R5, SP, 0
add R4, R5, 16
.L1:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L1
ld R9, 0
.L2:
and R4, R1, 15
ld R5, 10
blt R4, R5, .L6
jmp .L8
.L6:
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
jmp .L5
.L8:
sub R4, R4, 10
add R4, R4, 65
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
.L5:
add R9, R9, 1
lsr R1, R1, 4
ld R4, 0
beq R1, R4, .L3
jmp .L2
.L3:
sub R10, R2, R9
ld R1, 0
beq R3, R1, .L10
ld R1, 1
beq R3, R1, .L11
jmp .L12
jmp .L9
.L10:
sub R9, R9, 1
ld R11, 0
jmp .L16
.L13:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L16:
bge R9, R11, .L13
ld R9, 0
jmp .L20
.L17:
ld R1, 32
jsr /printChar(Char)
add R9, R9, 1
.L20:
blt R9, R10, .L17
jmp .L9
.L11:
ld R11, 0
jmp .L24
.L21:
ld R1, 32
jsr /printChar(Char)
add R11, R11, 1
.L24:
blt R11, R10, .L21
sub R9, R9, 1
ld R10, 0
jmp .L28
.L25:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L28:
bge R9, R10, .L25
jmp .L9
.L12:
ld R11, 0
jmp .L32
.L29:
ld R1, 48
jsr /printChar(Char)
add R11, R11, 1
.L32:
blt R11, R10, .L29
sub R9, R9, 1
ld R10, 0
jmp .L36
.L33:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar(Char)
sub R9, R9, 1
.L36:
bge R9, R10, .L33
.L9:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/kprintf(String,Any...):
# format = R1
# c = R1
# args = R9
# width = R11
# justify = R12
# index = R13
# V45 = R14
# inPercent = R15
sub SP, SP, 32
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R15, SP[24]
stw R30, SP[28]
ld R9, R2
ld R15, 0
ld R11, 0
ld R12, 1
ld R13, 0
ldw R2, R1[-4]
mul R2, R2, 1
add R10, R1, R2
ld R14, R1
jmp .L3
.L1:
ldb R1, R14[0]
bne R15, 0, .L6
jmp .L8
.L6:
ld R2, 100
beq R1, R2, .L10
jmp .L12
.L10:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintInt(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L9
.L12:
ld R2, 120
beq R1, R2, .L14
jmp .L16
.L14:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintHex(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L13
.L16:
ld R2, 115
beq R1, R2, .L18
jmp .L20
.L18:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /kprintString(String,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L17
.L20:
ld R2, 99
beq R1, R2, .L22
jmp .L24
.L22:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
jsr /printChar(Char)
add R13, R13, 1
ld R15, 0
jmp .L21
.L24:
ld R2, 48
beq R1, R2, .L28
jmp .L27
.L28:
ld R2, 0
beq R11, R2, .L26
.L27:
jmp .L29
.L26:
ld R12, 2
jmp .L25
.L29:
ld R2, 45
beq R1, R2, .L33
jmp .L32
.L33:
ld R2, 0
beq R11, R2, .L31
.L32:
jmp .L34
.L31:
ld R12, 0
jmp .L30
.L34:
ld R2, 48
bge R1, R2, .L38
jmp .L37
.L38:
ld R2, 57
bge R2, R1, .L36
.L37:
jmp .L39
.L36:
mul R2, R11, 10
sub R1, R1, 48
add R11, R2, R1
jmp .L35
.L39:
jsr /printChar(Char)
ld R15, 0
.L35:
.L30:
.L25:
.L21:
.L17:
.L13:
.L9:
jmp .L5
.L8:
ld R2, 37
beq R1, R2, .L41
jmp .L43
.L41:
ld R15, 1
ld R11, 0
ld R12, 1
jmp .L40
.L43:
jsr /printChar(Char)
.L40:
.L5:
add R14, R14, 1
.L3:
blt R14, R10, .L1
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R15, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/kPrintBlock(Array<Char>,Int):
# ptr = R1
# size = R2
# i = R3
# dummy = R1
ld R3, 0
jmp .L4
.L1:
jmp .L7
.L5:
.L7:
ld R4, -536870912
ldw R4, R4[16]
ld R5, 0
beq R4, R5, .L5
ldw R4, R1[-4]
idx1 R4, R3, R4
add R4, R1, R4
ldb R4, R4[0]
ld R5, -536870912
stw R4, R5[16]
add R3, R3, 1
.L4:
blt R3, R2, .L1
ret

/List/add(T):
# this = R9
# item = R10
# oldArray = R11
# i = R1
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R11, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R11[-4]
jmp .L7
.L4:
ldw R3, R11[-4]
idx4 R3, R1, R3
add R3, R11, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R11, 0, .L8
ld R1, R11
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[4]
ldw R2, R9[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/List/get(Int):
# this = R1
# index = R2
ldw R1, R1[4]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/set(Int,T):
# this = R1
# index = R2
# item = R3
ldw R1, R1[4]
ldw R4, R1[-4]
idx4 R2, R2, R4
add R1, R1, R2
stw R3, R1[0]
ret

/List/isEmpty():
# this = R1
ldw R1, R1[0]
xor R8, R1, 0
cltu R8, R8, 1
ret

/List/isNotEmpty():
# this = R1
ldw R1, R1[0]
clt R8, R1, 1
xor R8, R8, 1
ret

/List/take():
# this = R2
ld R2, R1
ldw R1, R2[0]
ld R3, 0
beq R1, R3, .L2
jmp .L1
.L2:
ld R1, 3588
sys 1
.L1:
ldw R1, R2[0]
sub R1, R1, 1
stw R1, R2[0]
ldw R1, R2[4]
ldw R2, R2[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/clear():
# this = R1
ld R2, 0
stw R2, R1[0]
ret

/List/removeAt(Int):
# this = R1
# index = R2
# i = R2
# ret = R8
ldw R3, R1[4]
ldw R4, R3[-4]
idx4 R4, R2, R4
add R3, R3, R4
ldw R8, R3[0]
ldw R3, R1[0]
sub R3, R3, 1
jmp .L4
.L1:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L4:
blt R2, R3, .L1
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ret

/List/remove(T):
# this = R1
# item = R2
# j = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R2, R3
ldw R3, R1[0]
sub R3, R3, 1
jmp .L11
.L8:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L11:
blt R2, R3, .L8
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/indexOf(T):
# this = R1
# item = R2
# i = R8
ld R8, 0
ldw R3, R1[0]
jmp .L4
.L1:
ldw R4, R1[4]
ldw R5, R4[-4]
idx4 R5, R8, R5
add R4, R4, R5
ldw R4, R4[0]
beq R4, R2, .L6
jmp .L5
.L6:
jmp .L0
.L5:
add R8, R8, 1
.L4:
blt R8, R3, .L1
ld R8, -1
.L0:
ret

/List/addAt(Int,T):
# this = R9
# item = R10
# index = R11
# oldArray = R12
# i = R1
# i = R1
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R11, R2
ld R10, R3
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R12, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R12[-4]
jmp .L7
.L4:
ldw R3, R12[-4]
idx4 R3, R1, R3
add R3, R12, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R12, 0, .L8
ld R1, R12
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[0]
sub R1, R1, 1
jmp .L12
.L9:
ldw R2, R9[4]
ldw R3, R2[-4]
idx4 R3, R1, R3
add R2, R2, R3
ldw R2, R2[0]
ldw R3, R9[4]
add R4, R1, 1
ldw R5, R3[-4]
idx4 R4, R4, R5
add R3, R3, R4
stw R2, R3[0]
sub R1, R1, 1
.L12:
bge R1, R11, .L9
ldw R1, R9[4]
ldw R2, R1[-4]
idx4 R2, R11, R2
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/List/contains(T):
# this = R1
# item = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/last():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R2, R1[4]
ldw R1, R1[0]
sub R1, R1, 1
ldw R3, R2[-4]
idx4 R1, R1, R3
add R1, R2, R1
ldw R8, R1[0]
.L0:
ret

/List/first():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R1, R1[4]
ld R2, 0
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
.L0:
ret

/initializeMemorySystem():
ld R1, 4096
stw R1, R29[0]
ld R1, 61440
ldw R2, R29[0]
stw R1, R2[0]
ld R1, 0
ldw R2, R29[0]
stw R1, R2[4]
ret

/insertBlockIntoFreeList(FreeMemBlock,Int):
# block = R1
# size = R2
# prev = R3
# p = R4
stw R2, R1[0]
ldw R4, R29[0]
ld R3, 0
jmp .L3
.L1:
ld R3, R4
ldw R4, R4[4]
.L3:
ld R5, 0
bne R4, R5, .L4
jmp .L2
.L4:
ldw R5, R4[0]
blt R5, R2, .L1
.L2:
ld R2, 0
beq R3, R2, .L6
jmp .L8
.L6:
ldw R2, R29[0]
stw R2, R1[4]
stw R1, R29[0]
jmp .L5
.L8:
ldw R2, R3[4]
stw R2, R1[4]
stw R1, R3[4]
.L5:
ret

/mallocInternal(Int):
# newBlock = R1
# sizeSplit = R2
# p = R9
# sizeReq = R3
# prev = R2
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R3, R1
ld R2, 0
ldw R9, R29[0]
jmp .L3
.L1:
ld R2, R9
ldw R9, R9[4]
.L3:
ld R1, 0
bne R9, R1, .L4
jmp .L2
.L4:
ldw R1, R9[0]
blt R1, R3, .L1
.L2:
ld R1, 0
beq R9, R1, .L6
jmp .L5
.L6:
ld R1, 3585
sys 1
.L5:
ld R1, 0
beq R2, R1, .L9
jmp .L11
.L9:
ldw R1, R9[4]
stw R1, R29[0]
jmp .L8
.L11:
ldw R1, R9[4]
stw R1, R2[4]
.L8:
ldw R1, R9[0]
sub R2, R1, R3
ld R1, 0
blt R1, R2, .L13
jmp .L12
.L13:
add R1, R9, R3
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L12:
ld R8, R9
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/mallocObject(ClassDescriptor):
# ret = R8
# klass = R9
# size = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ldw R1, R9[0]
add R1, R1, 8
add R1, R1, 15
and R10, R1, -16
ld R1, R10
jsr /mallocInternal(Int)
or R1, R10, 1
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/mallocArray(Int,Int,Bool):
# ret = R8
# retInt = R8
# numElements = R9
# elementSize = R10
# clear = R11
# size = R12
# ary = R1
# i = R2
# numWords = R3
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R10, R2
ld R11, R3
mul R1, R9, R10
add R1, R1, 8
add R1, R1, 15
and R12, R1, -16
ld R1, R12
jsr /mallocInternal(Int)
or R1, R12, 2
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
bne R11, 0, .L2
jmp .L1
.L2:
mul R1, R9, R10
divs R3, R1, 4
ld R1, R8
ld R2, 0
jmp .L7
.L4:
ld R4, 0
ldw R5, R1[-4]
idx4 R5, R2, R5
add R5, R1, R5
stw R4, R5[0]
add R2, R2, 1
.L7:
blt R2, R3, .L4
.L1:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/free(Int):
# ptr = R1
# block = R3
# size = R2
sub SP, SP, 4
stw R30, SP[0]
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
jmp .L0
.L1:
sub R3, R1, 8
ldw R2, R3[0]
and R1, R2, 15
ld R4, 0
beq R1, R4, .L5
jmp .L4
.L5:
ld R1, 3586
sys 1
.L4:
and R2, R2, -16
ld R1, R3
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L0:
ldw R30, SP[0]
add SP, SP, 4
ret

/dumpMemorySystem():
# p = R9
# size = R10
# block = R11
# type = R12
# sizeAndType = R1
# className = R1
# numElements = R1
# freeBlocks = R1
sub SP, SP, 68
stw R9, SP[48]
stw R10, SP[52]
stw R11, SP[56]
stw R12, SP[60]
stw R30, SP[64]
ld R9, 4096
ld R1, 0
stw R1, SP[0]
ld R1, OBJ12
add R2, SP, 4
jsr /kprintf(String,Any...)
jmp .L3
.L1:
ld R11, R9
ldw R1, R11[0]
and R12, R1, 15
and R10, R1, -16
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ13
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R1, 1
beq R12, R1, .L5
ld R1, 2
beq R12, R1, .L6
ld R1, 0
beq R12, R1, .L7
jmp .L4
.L5:
ldw R1, R9[4]
ldw R1, R1[4]
ld R2, 2
stw R2, SP[12]
stw R10, SP[16]
stw R1, SP[20]
ld R1, OBJ14
add R2, SP, 16
jsr /kprintf(String,Any...)
jmp .L4
.L6:
ldw R1, R9[4]
ld R2, 2
stw R2, SP[24]
stw R10, SP[28]
stw R1, SP[32]
ld R1, OBJ15
add R2, SP, 28
jsr /kprintf(String,Any...)
jmp .L4
.L7:
ld R1, 2
stw R1, SP[36]
stw R10, SP[40]
ldw R1, R11[4]
stw R1, SP[44]
ld R1, OBJ16
add R2, SP, 40
jsr /kprintf(String,Any...)
.L4:
add R9, R9, R10
.L3:
ld R1, 65536
blt R9, R1, .L8
jmp .L2
.L8:
ld R1, 0
bge R9, R1, .L1
.L2:
ldw R9, SP[48]
ldw R10, SP[52]
ldw R11, SP[56]
ldw R12, SP[60]
ldw R30, SP[64]
add SP, SP, 68
ret

/getBuddy(Int):
# blk = R1
# size = R2
and R2, R1, 15
ld R3, 4096
lsl R2, R3, R2
xor R8, R1, R2
ret

/mergeBuddy(Int):
# blk = R1
# size = R2
# base = R1
and R2, R1, 15
ld R3, -8192
lsl R3, R3, R2
and R1, R1, R3
add R2, R2, 1
or R8, R1, R2
ret

/freeBlock(Int):
# b = R1
# blk = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
jmp .L3
.L1:
ld R1, R9
jsr /mergeBuddy(Int)
ld R9, R8
.L3:
ld R1, R9
jsr /getBuddy(Int)
ldw R1, R29[4]
and R2, R9, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R8
jsr /List/remove(T)
bne R8, 0, .L1
ldw R1, R29[4]
and R2, R9, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R9
jsr /List/add(T)
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/buddyLog2(Int):
# size = R1
# s = R1
# logSize = R8
ld R8, 0
jmp .L3
.L1:
lsr R1, R1, 1
add R8, R8, 1
.L3:
ld R2, 4096
blt R2, R1, .L1
ret

/allocateBlock(Int):
# size = R1
# logSize = R9
# slot = R10
# blk = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
jsr /buddyLog2(Int)
ld R9, R8
ld R10, R9
jmp .L3
.L1:
add R10, R10, 1
ld R1, 16
beq R10, R1, .L5
jmp .L4
.L5:
ld R1, 3585
sys 1
.L4:
.L3:
ldw R1, R29[4]
ldw R2, R1[-4]
idx4 R2, R10, R2
add R1, R1, R2
ldw R1, R1[0]
jsr /List/isEmpty()
bne R8, 0, .L1
ldw R1, R29[4]
ldw R2, R1[-4]
idx4 R2, R10, R2
add R1, R1, R2
ldw R1, R1[0]
jsr /List/take()
ld R10, R8
jmp .L9
.L7:
sub R10, R10, 1
ld R1, R10
jsr /getBuddy(Int)
ldw R1, R29[4]
and R2, R10, 15
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R1, R1[0]
ld R2, R8
jsr /List/add(T)
.L9:
and R1, R10, 15
blt R9, R1, .L7
ld R8, R10
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/initializeBuddyAllocator():
# V36 = R11
# V37 = R12
# blk = R9
# it = R1
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R9, 16
ld R2, 4
ld R3, 0
ld R1, R9
jsr /mallocArray(Int,Int,Bool)
ld R10, R8
ld R11, 0
ld R12, R10
jmp .L2
.L1:
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R13, R8
ld R1, R13
jsr /List
stw R13, R12[0]
add R11, R11, 1
add R12, R12, 4
.L2:
blt R11, R9, .L1
stw R10, R29[4]
ld R9, 65536
jmp .L5
.L3:
ld R1, R9
jsr /freeBlock(Int)
ld R1, 4096
add R9, R9, R1
.L5:
ld R1, 131072
blt R9, R1, .L3
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/dumpBuddyAllocator():
# blk = R8
# i = R9
# V48 = R13
sub SP, SP, 48
stw R9, SP[24]
stw R10, SP[28]
stw R11, SP[32]
stw R12, SP[36]
stw R13, SP[40]
stw R30, SP[44]
ld R1, 0
stw R1, SP[0]
ld R1, OBJ17
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R9, 0
ld R10, 16
jmp .L4
.L1:
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ18
add R2, SP, 8
jsr /kprintf(String,Any...)
ldw R1, R29[4]
ldw R2, R1[-4]
idx4 R2, R9, R2
add R1, R1, R2
ldw R11, R1[0]
ldw R12, R11[0]
ld R13, 0
jmp .L7
.L5:
ld R1, R11
ld R2, R13
jsr /List/get(Int)
ld R1, 1
stw R1, SP[12]
stw R8, SP[16]
ld R1, OBJ13
add R2, SP, 16
jsr /kprintf(String,Any...)
add R13, R13, 1
.L7:
blt R13, R12, .L5
ld R1, 0
stw R1, SP[20]
ld R1, OBJ19
add R2, SP, 24
jsr /kprintf(String,Any...)
add R9, R9, 1
.L4:
blt R9, R10, .L1
ldw R9, SP[24]
ldw R10, SP[28]
ldw R11, SP[32]
ldw R12, SP[36]
ldw R13, SP[40]
ldw R30, SP[44]
add SP, SP, 48
ret

/TaskControlBlock/addMemoryBlock(Int):
# block = R2
# this = R3
# i = R1
sub SP, SP, 4
stw R30, SP[0]
ld R3, R1
ld R1, 0
ld R4, 8
jmp .L4
.L1:
add R5, R3, 136
ld R6, 8
idx4 R6, R1, R6
add R5, R5, R6
ldw R5, R5[0]
ld R6, 0
beq R5, R6, .L6
jmp .L5
.L6:
add R3, R3, 136
ld R4, 8
idx4 R1, R1, R4
add R1, R3, R1
stw R2, R1[0]
jmp .L0
.L5:
add R1, R1, 1
.L4:
blt R1, R4, .L1
ld R1, OBJ20
ld R2, 3589
ld R4, 0
jsr /dumpAndTerminate(String,Int,TaskControlBlock,Int)
.L0:
ldw R30, SP[0]
add SP, SP, 4
ret

/dumpAndTerminate(String,Int,TaskControlBlock,Int):
# message = R1
# code = R9
# tcb = R10
# i = R11
# data = R11
sub SP, SP, 64
stw R9, SP[44]
stw R10, SP[48]
stw R11, SP[52]
stw R12, SP[56]
stw R30, SP[60]
ld R9, R2
ld R10, R3
ld R11, R4
ld R2, 2
stw R2, SP[0]
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ21
add R2, SP, 4
jsr /kprintf(String,Any...)
ld R1, 2
stw R1, SP[12]
stw R11, SP[16]
ldw R1, R10[0]
stw R1, SP[20]
ld R1, OBJ22
add R2, SP, 16
jsr /kprintf(String,Any...)
ld R11, 1
ld R12, 31
jmp .L4
.L1:
ld R1, 2
stw R1, SP[24]
stw R11, SP[28]
add R1, R10, 4
ld R2, 32
idx4 R2, R11, R2
add R1, R1, R2
ldw R1, R1[0]
stw R1, SP[32]
ld R1, OBJ23
add R2, SP, 28
jsr /kprintf(String,Any...)
and R1, R11, 7
ld R2, 7
beq R1, R2, .L6
jmp .L8
.L6:
ld R1, 0
stw R1, SP[36]
ld R1, OBJ19
add R2, SP, 40
jsr /kprintf(String,Any...)
jmp .L5
.L8:
ld R1, 0
stw R1, SP[40]
ld R1, OBJ24
add R2, SP, 44
jsr /kprintf(String,Any...)
.L5:
add R11, R11, 1
.L4:
bge R12, R11, .L1
ld R1, R9
jsr /shutdown(Int)
ldw R9, SP[44]
ldw R10, SP[48]
ldw R11, SP[52]
ldw R12, SP[56]
ldw R30, SP[60]
add SP, SP, 64
ret

/startup():
# task = R9
# taskStack = R10
# taskGlobals = R10
sub SP, SP, 48
stw R9, SP[36]
stw R10, SP[40]
stw R30, SP[44]
ld R1, 0
stw R1, SP[0]
ld R1, OBJ25
add R2, SP, 4
jsr /kprintf(String,Any...)
jsr /initializeMemorySystem()
jsr /initializeBuddyAllocator()
ld R1, 0
stw R1, SP[4]
ld R1, OBJ26
add R2, SP, 8
jsr /kprintf(String,Any...)
ld R1, TaskControlBlock/class
jsr /mallocObject(ClassDescriptor)
ld R9, R8
ld R2, /myFirstTask()
ld R1, R9
jsr /TaskControlBlock
ld R1, 1
stw R1, SP[8]
stw R9, SP[12]
ld R1, OBJ27
add R2, SP, 12
jsr /kprintf(String,Any...)
ld R1, 4096
jsr /allocateBlock(Int)
ld R10, R8
ld R1, -4096
and R1, R10, R1
ld R2, 4096
add R1, R1, R2
add R2, R9, 4
ld R3, 31
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
or R2, R10, 768
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, 1
stw R1, SP[16]
stw R10, SP[20]
ld R1, OBJ28
add R2, SP, 20
jsr /kprintf(String,Any...)
ld R1, 4096
jsr /allocateBlock(Int)
ld R10, R8
ld R1, -4096
and R1, R10, R1
add R2, R9, 4
ld R3, 29
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
or R2, R10, 1280
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, 1
stw R1, SP[24]
stw R10, SP[28]
ld R1, OBJ29
add R2, SP, 28
jsr /kprintf(String,Any...)
ld R2, -64252
ld R1, R9
jsr /TaskControlBlock/addMemoryBlock(Int)
ld R1, /endTask()
add R2, R9, 4
ld R3, 30
ld R4, 32
idx4 R3, R3, R4
add R2, R2, R3
stw R1, R2[0]
ld R1, 0
stw R1, SP[32]
ld R1, OBJ30
add R2, SP, 36
jsr /kprintf(String,Any...)
ld R1, R9
jsr /resumeTask(TaskControlBlock)
ldw R9, SP[36]
ldw R10, SP[40]
ldw R30, SP[44]
add SP, SP, 48
ret

/myFirstTask():
sub SP, SP, 4
stw R30, SP[0]
ld R1, OBJ31
jsr /printString
ldw R30, SP[0]
add SP, SP, 4
ret

/GraphicsContext/ownBlitter():
# this = R1
# dummy = R1
jmp .L3
.L1:
.L3:
ld R2, -536870860
ldw R2, R2[0]
ld R3, 8
blt R2, R3, .L1
ldw R2, R1[0]
ld R3, -536870860
stw R2, R3[4]
ldw R2, R1[4]
ld R3, -536870860
stw R2, R3[8]
ld R2, 1
ld R3, -536870860
stw R2, R3[0]
ldw R2, R1[20]
lsl R2, R2, 16
ldw R3, R1[12]
or R2, R2, R3
ld R3, -536870860
stw R2, R3[4]
ldw R2, R1[24]
lsl R2, R2, 16
ldw R3, R1[16]
or R2, R2, R3
ld R3, -536870860
stw R2, R3[8]
ld R2, 2
ld R3, -536870860
stw R2, R3[0]
ldw R2, R1[12]
ld R3, -536870860
stw R2, R3[4]
ldw R2, R1[20]
ld R3, -536870860
stw R2, R3[8]
ld R2, 3
ld R3, -536870860
stw R2, R3[0]
ldw R2, R1[28]
ld R3, -536870860
stw R2, R3[4]
ldw R2, R1[32]
ld R3, -536870860
stw R2, R3[8]
ld R2, 4
ld R3, -536870860
stw R2, R3[0]
ldw R2, R1[40]
ld R3, -536870860
stw R2, R3[4]
ld R2, 536870912
ldw R3, R1[44]
ldw R4, R1[48]
mul R3, R3, R4
divs R3, R3, 8
lsl R3, R3, 16
or R2, R2, R3
ldw R3, R1[48]
lsl R3, R3, 8
or R2, R2, R3
ldw R3, R1[44]
or R2, R2, R3
ld R3, -536870860
stw R2, R3[8]
ld R2, 11
ld R3, -536870860
stw R2, R3[0]
ldw R1, R1[36]
ld R2, -536870860
stw R1, R2[4]
ld R1, 12
ld R2, -536870860
stw R1, R2[0]
ret

/GraphicsContext/setColor(Int):
# this = R1
# fg = R2
# dummy = R1
stw R2, R1[28]
ldw R2, R1[28]
ld R3, -536870860
stw R2, R3[4]
ldw R1, R1[32]
ld R2, -536870860
stw R1, R2[8]
jmp .L3
.L1:
.L3:
ld R1, -536870860
ldw R1, R1[0]
ld R2, 1
bge R2, R1, .L1
ld R1, 4
ld R2, -536870860
stw R1, R2[0]
ret

/GraphicsContext/setColor(Int,Int):
# this = R1
# fg = R2
# bg = R3
# dummy = R1
stw R2, R1[28]
stw R3, R1[32]
ldw R2, R1[28]
ld R3, -536870860
stw R2, R3[4]
ldw R1, R1[32]
ld R2, -536870860
stw R1, R2[8]
jmp .L3
.L1:
.L3:
ld R1, -536870860
ldw R1, R1[0]
ld R2, 1
bge R2, R1, .L1
ld R1, 4
ld R2, -536870860
stw R1, R2[0]
ret

/GraphicsContext/drawRect(Int,Int,Int,Int):
# x1 = R2
# y1 = R3
# x2 = R4
# y2 = R5
# this = R1
# dummy = R1
jmp .L3
.L1:
.L3:
ld R1, -536870860
ldw R1, R1[0]
ld R6, 1
bge R6, R1, .L1
lsl R1, R3, 16
or R1, R1, R2
ld R2, -536870860
stw R1, R2[4]
lsl R1, R5, 16
or R1, R1, R4
ld R2, -536870860
stw R1, R2[8]
ld R1, 5
ld R2, -536870860
stw R1, R2[0]
ret

/GraphicsContext/drawLine(Int,Int,Int,Int):
# x1 = R2
# y1 = R3
# x2 = R4
# y2 = R5
# this = R1
# dummy = R1
lsl R1, R3, 16
or R1, R1, R2
ld R2, -536870860
stw R1, R2[4]
lsl R1, R5, 16
or R1, R1, R4
ld R2, -536870860
stw R1, R2[8]
jmp .L3
.L1:
.L3:
ld R1, -536870860
ldw R1, R1[0]
ld R2, 1
bge R2, R1, .L1
ld R1, 6
ld R2, -536870860
stw R1, R2[0]
ret

/GraphicsContext/drawText(Int,Int,String):
# this = R1
# x = R2
# y = R3
# text = R4
# i = R5
# dummy = R1
ld R5, 0
ldw R6, R4[-4]
jmp .L4
.L1:
lsl R7, R3, 16
ldw R8, R1[44]
mul R8, R5, R8
add R8, R2, R8
or R7, R7, R8
ld R8, -536870860
stw R7, R8[4]
ldw R7, R4[-4]
idx1 R7, R5, R7
add R7, R4, R7
ldb R7, R7[0]
ld R8, -536870860
stw R7, R8[8]
jmp .L7
.L5:
.L7:
ld R7, -536870860
ldw R7, R7[0]
ld R8, 1
bge R8, R7, .L5
ld R7, 10
ld R8, -536870860
stw R7, R8[0]
add R5, R5, 1
.L4:
blt R5, R6, .L1
ret

/GraphicsContext/waitVSync():
# hwRegs = R1
# this = R1
# dummy = R1
# dummy1 = R1
ld R1, -536870912
jmp .L3
.L1:
.L3:
ldw R2, R1[36]
ld R3, 480
bge R2, R3, .L1
jmp .L6
.L4:
.L6:
ldw R2, R1[36]
ld R3, 480
blt R2, R3, .L4
ret

/Window/updateLayer():
# this = R1
# layer = R2
ld R2, -536866816
ldw R3, R1[20]
mul R3, R3, 32
add R2, R2, R3
ldw R3, R1[24]
stw R3, R2[0]
ldw R3, R1[0]
stw R3, R2[4]
ldw R3, R1[4]
stw R3, R2[8]
ldw R3, R1[0]
ldw R4, R1[8]
add R3, R3, R4
stw R3, R2[12]
ldw R3, R1[4]
ldw R4, R1[12]
add R3, R3, R4
stw R3, R2[16]
ldw R1, R1[8]
stw R1, R2[20]
ld R1, 1
stw R1, R2[24]
ret

/Window/drawBorders(Bool):
# titleColor = R2
# this = R9
# V36 = R2
# active = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R10, R2
ldw R1, R9[28]
jsr /GraphicsContext/ownBlitter()
bne R10, 0, .L1
jmp .L2
.L1:
ld R2, 15
jmp .L3
.L2:
ld R2, 0
.L3:
ldw R1, R9[28]
ld R3, R2
jsr /GraphicsContext/setColor(Int,Int)
ld R2, 1
ld R3, 1
ldw R1, R9[8]
sub R4, R1, 2
ld R5, 13
ldw R1, R9[28]
jsr /GraphicsContext/drawRect(Int,Int,Int,Int)
ld R2, 255
ldw R1, R9[28]
jsr /GraphicsContext/setColor(Int)
ld R2, 0
ld R3, 0
ldw R1, R9[8]
sub R4, R1, 1
ld R5, 0
ldw R1, R9[28]
jsr /GraphicsContext/drawLine(Int,Int,Int,Int)
ldw R1, R9[8]
sub R2, R1, 1
ld R3, 0
ldw R1, R9[8]
sub R4, R1, 1
ldw R1, R9[12]
sub R5, R1, 1
ldw R1, R9[28]
jsr /GraphicsContext/drawLine(Int,Int,Int,Int)
ldw R1, R9[8]
sub R2, R1, 1
ldw R1, R9[12]
sub R3, R1, 1
ld R4, 0
ldw R1, R9[12]
sub R5, R1, 1
ldw R1, R9[28]
jsr /GraphicsContext/drawLine(Int,Int,Int,Int)
ld R2, 0
ldw R1, R9[12]
sub R3, R1, 1
ld R4, 0
ld R5, 0
ldw R1, R9[28]
jsr /GraphicsContext/drawLine(Int,Int,Int,Int)
ld R2, 0
ld R3, 14
ldw R1, R9[8]
sub R4, R1, 1
ld R5, 14
ldw R1, R9[28]
jsr /GraphicsContext/drawLine(Int,Int,Int,Int)
ld R2, 2
ld R3, 2
ldw R4, R9[16]
ldw R1, R9[28]
jsr /GraphicsContext/drawText(Int,Int,String)
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/Window/getGraphicsContext():
# this = R9
# ret = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R1, GraphicsContext/class
jsr /mallocObject(ClassDescriptor)
ld R10, R8
ldw R2, R9[24]
ldw R3, R9[8]
ldw R4, R9[12]
ld R1, R10
jsr /GraphicsContext
ld R1, 2
stw R1, R10[12]
ld R1, 16
stw R1, R10[20]
ldw R1, R9[8]
sub R1, R1, 2
stw R1, R10[16]
ldw R1, R9[12]
sub R1, R1, 2
stw R1, R10[24]
ld R1, R10
jsr /GraphicsContext/ownBlitter()
ld R8, R10
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/Window/move(Int,Int):
# this = R1
# newX = R2
# newY = R3
sub SP, SP, 4
stw R30, SP[0]
ld R4, 0
blt R4, R2, .L4
jmp .L3
.L4:
ld R4, 640
blt R2, R4, .L2
.L3:
jmp .L1
.L2:
stw R2, R1[0]
.L1:
ld R2, 0
blt R2, R3, .L8
jmp .L7
.L8:
ld R2, 480
blt R3, R2, .L6
.L7:
jmp .L5
.L6:
stw R3, R1[4]
.L5:
jsr /Window/updateLayer()
ldw R30, SP[0]
add SP, SP, 4
ret

/WindowManager/newWindow(Int,Int,Int,Int,String):
# this = R9
# x = R10
# y = R11
# width = R12
# height = R13
# title = R14
# wdw = R15
sub SP, SP, 32
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R15, SP[24]
stw R30, SP[28]
ld R9, R1
ld R10, R2
ld R11, R3
ld R12, R4
ld R13, R5
ld R14, R6
ld R1, Window/class
jsr /mallocObject(ClassDescriptor)
ld R15, R8
ldw R1, R9[0]
ldw R7, R1[0]
ld R1, R15
ld R2, R10
ld R3, R11
ld R4, R12
ld R5, R13
ld R6, R14
jsr /Window
ldw R1, R9[0]
ld R2, R15
jsr /List/add(T)
ld R1, R15
jsr /Window/updateLayer()
ld R1, R9
ld R2, R15
jsr /WindowManager/setActiveWindow(Window?)
ld R8, R15
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R15, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/WindowManager/getWindowAt(Int,Int):
# this = R1
# wdw = R8
# x = R9
# y = R10
# ret = R11
# V39 = R14
sub SP, SP, 28
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R30, SP[24]
ld R9, R2
ld R10, R3
ld R11, 0
ldw R12, R1[0]
ldw R13, R12[0]
ld R14, 0
jmp .L3
.L1:
ld R1, R12
ld R2, R14
jsr /List/get(Int)
ldw R1, R8[0]
bge R9, R1, .L10
jmp .L7
.L10:
ldw R1, R8[0]
ldw R2, R8[8]
add R1, R1, R2
blt R9, R1, .L9
jmp .L7
.L9:
ldw R1, R8[4]
bge R10, R1, .L8
jmp .L7
.L8:
ldw R1, R8[4]
ldw R2, R8[12]
add R1, R1, R2
blt R10, R1, .L6
.L7:
jmp .L5
.L6:
ld R11, R8
.L5:
add R14, R14, 1
.L3:
blt R14, R13, .L1
ld R8, R11
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R30, SP[24]
add SP, SP, 28
ret

/WindowManager/checkForEvents():
# dw = R1
# wdw = R8
# this = R9
# mouse_btn = R10
# mouse_y = R11
# mouse_x = R12
# wdw = R13
# hwRegs = R1
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R9, R1
ld R1, -536870912
ldw R12, R1[40]
ldw R11, R1[44]
ldw R10, R1[48]
ldw R1, R9[12]
ld R2, 0
bne R1, R2, .L2
jmp .L4
.L2:
ld R2, 0
beq R10, R2, .L6
jmp .L8
.L6:
ld R1, 0
stw R1, R9[12]
jmp .L5
.L8:
ldw R2, R9[16]
sub R2, R12, R2
ldw R3, R9[20]
sub R3, R11, R3
jsr /Window/move(Int,Int)
.L5:
jmp .L1
.L4:
ld R1, 1
beq R10, R1, .L12
jmp .L11
.L12:
ldw R1, R9[4]
ld R2, 0
beq R1, R2, .L10
.L11:
jmp .L13
.L10:
ld R1, R9
ld R2, R12
ld R3, R11
jsr /WindowManager/getWindowAt(Int,Int)
ld R13, R8
ld R1, R9
ld R2, R13
jsr /WindowManager/setActiveWindow(Window?)
ld R1, 0
bne R13, R1, .L15
jmp .L14
.L15:
ld R1, R9
ld R2, R13
jsr /WindowManager/moveToFront(Window)
ldw R1, R13[0]
sub R1, R12, R1
stw R1, R9[16]
ldw R1, R13[4]
sub R1, R11, R1
stw R1, R9[20]
ldw R1, R9[20]
ld R2, 16
blt R1, R2, .L18
jmp .L17
.L18:
stw R13, R9[12]
.L17:
.L14:
jmp .L9
.L13:
ld R1, 4
beq R10, R1, .L23
jmp .L22
.L23:
ldw R1, R9[4]
ld R2, 0
beq R1, R2, .L21
.L22:
jmp .L20
.L21:
ld R1, R9
ld R2, R12
ld R3, R11
jsr /WindowManager/getWindowAt(Int,Int)
ld R1, 0
bne R8, R1, .L27
jmp .L26
.L27:
ldw R1, R8[4]
sub R1, R11, R1
ld R2, 16
blt R1, R2, .L25
.L26:
jmp .L24
.L25:
ld R1, R9
ld R2, R8
jsr /WindowManager/moveToBack(Window)
.L24:
.L20:
.L9:
.L1:
stw R10, R9[4]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/WindowManager/setActiveWindow(Window?):
# this = R1
# wdw = R8
# active = R9
# V37 = R12
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R2
ldw R2, R1[8]
beq R2, R9, .L2
jmp .L1
.L2:
jmp .L0
.L1:
stw R9, R1[8]
ldw R10, R1[0]
ldw R11, R10[0]
ld R12, 0
jmp .L6
.L4:
ld R1, R10
ld R2, R12
jsr /List/get(Int)
xor R2, R8, R9
cltu R2, R2, 1
ld R1, R8
jsr /Window/drawBorders(Bool)
add R12, R12, 1
.L6:
blt R12, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/WindowManager/moveToFront(Window):
# this = R9
# i = R10
# wdw = R10
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
jsr /List/last()
beq R8, R10, .L2
jmp .L1
.L2:
jmp .L0
.L1:
ldw R1, R9[0]
ld R2, R10
jsr /List/remove(T)
ldw R1, R9[0]
ld R2, R10
jsr /List/add(T)
ld R10, 0
ldw R1, R9[0]
ldw R11, R1[0]
jmp .L7
.L4:
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
stw R10, R8[20]
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
ld R1, R8
jsr /Window/updateLayer()
add R10, R10, 1
.L7:
blt R10, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/WindowManager/moveToBack(Window):
# this = R9
# i = R10
# wdw = R10
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
jsr /List/first()
beq R8, R10, .L2
jmp .L1
.L2:
jmp .L0
.L1:
ldw R1, R9[0]
ld R2, R10
jsr /List/remove(T)
ld R2, 0
ldw R1, R9[0]
ld R3, R10
jsr /List/addAt(Int,T)
ld R10, 0
ldw R1, R9[0]
ldw R11, R1[0]
jmp .L7
.L4:
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
stw R10, R8[20]
ldw R1, R9[0]
ld R2, R10
jsr /List/get(Int)
ld R1, R8
jsr /Window/updateLayer()
add R10, R10, 1
.L7:
blt R10, R11, .L4
.L0:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/List:
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ld R1, 0
stw R1, R9[0]
ld R1, 8
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/HwRegs:
# this = R1
ret

/FreeMemBlock:
# this = R1
ret

/ArrayMemBlock:
# this = R1
ret

/ObjectMemBlock:
# this = R1
ret

/ClassDescriptor:
# this = R1
# freeList = R1
ret

/TaskControlBlock:
# this = R1
# pc = R2
# V36 = R3
# V42 = R2
stw R2, R1[0]
add R3, R1, 4
add R2, R3, 128
.L1:
stw 0, R3[0]
add R3, R3, 4
blt R3, R2, .L1
ld R2, 0
stw R2, R1[132]
add R2, R1, 136
add R1, R2, 32
.L2:
stw 0, R2[0]
add R2, R2, 4
blt R2, R1, .L2
ret

/Blitter:
# this = R1
ret

/VgaLayer:
# this = R1
ret

/GraphicsContext:
# this = R1
# bitmap = R2
# width = R3
# height = R4
stw R2, R1[0]
stw R3, R1[4]
stw R4, R1[8]
ld R2, 0
stw R2, R1[12]
stw R3, R1[16]
ld R2, 0
stw R2, R1[20]
stw R4, R1[24]
ld R2, 255
stw R2, R1[28]
ld R2, 0
stw R2, R1[32]
ld R2, 256
stw R2, R1[36]
ld R2, -268435456
stw R2, R1[40]
ld R2, 8
stw R2, R1[44]
ld R2, 12
stw R2, R1[48]
ret

/Window:
# x = R2
# y = R3
# title = R6
# layerNumber = R7
# this = R9
# width = R10
# height = R11
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R10, R4
ld R11, R5
stw R2, R9[0]
stw R3, R9[4]
stw R10, R9[8]
stw R11, R9[12]
stw R6, R9[16]
stw R7, R9[20]
mul R1, R10, R11
divs R1, R1, 4
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[24]
ld R1, GraphicsContext/class
jsr /mallocObject(ClassDescriptor)
ld R12, R8
ldw R2, R9[24]
ld R1, R12
ld R3, R10
ld R4, R11
jsr /GraphicsContext
stw R12, R9[28]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/WindowManager:
# this = R9
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R1, List/class
jsr /mallocObject(ClassDescriptor)
ld R10, R8
ld R1, R10
jsr /List
stw R10, R9[0]
ld R1, 0
stw R1, R9[4]
ld R1, 0
stw R1, R9[8]
ld R1, 0
stw R1, R9[12]
ld R1, 0
stw R1, R9[16]
ld R1, 0
stw R1, R9[20]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

List/class:
dcw 8
dcw OBJ32

HwRegs/class:
dcw 72
dcw OBJ33

FreeMemBlock/class:
dcw 8
dcw OBJ34

ArrayMemBlock/class:
dcw 8
dcw OBJ35

ObjectMemBlock/class:
dcw 8
dcw OBJ36

ClassDescriptor/class:
dcw 8
dcw OBJ37

TaskControlBlock/class:
dcw 168
dcw OBJ38

Blitter/class:
dcw 12
dcw OBJ39

VgaLayer/class:
dcw 28
dcw OBJ40

GraphicsContext/class:
dcw 52
dcw OBJ41

Window/class:
dcw 32
dcw OBJ42

WindowManager/class:
dcw 24
dcw OBJ43

dcw 24
OBJ0: # Exception handler %x
dcw 1701017669
dcw 1869182064
dcw 1634213998
dcw 1701602414
dcw 2015699058
dcw 175645984

dcw 24
OBJ1: # INSTRUCTION_ACCESS_F
dcw 1414745673
dcw 1413698898
dcw 1598967625
dcw 1162036033
dcw 1180652371
dcw 1414288705

dcw 19
OBJ2: # ILLEGAL INSTRUCTION
dcw 1162628169
dcw 541868359
dcw 1414745673
dcw 1413698898
dcw 5132105

dcw 10
OBJ3: # BREAKPOINT
dcw 1095062082
dcw 1229934667
dcw 21582

dcw 23
OBJ4: # LOAD ADDRESS MISALIG
dcw 1145130828
dcw 1145323808
dcw 1397966162
dcw 1397312800
dcw 1195985985
dcw 4474190

dcw 17
OBJ5: # LOAD ACCESS FAULT
dcw 1145130828
dcw 1128481056
dcw 542331717
dcw 1280655686
dcw 84

dcw 24
OBJ6: # STORE ADDRESS MISALI
dcw 1380930643
dcw 1145118789
dcw 1397051972
dcw 1229791315
dcw 1229734227
dcw 1145392711

dcw 18
OBJ7: # STORE ACCESS FAULT
dcw 1380930643
dcw 1128341573
dcw 1397966147
dcw 1430341152
dcw 21580

dcw 17
OBJ8: # Program completed
dcw 1735357008
dcw 544039282
dcw 1886220131
dcw 1702126956
dcw 100

dcw 19
OBJ9: # Unknown system call
dcw 1852534357
dcw 544110447
dcw 1953724787
dcw 1663069541
dcw 7105633

dcw 14
OBJ10: # INDEX OVERFLOW
dcw 1162104393
dcw 1448026200
dcw 1279676997
dcw 22351

dcw 17
OBJ11: # Unknown exception
dcw 1852534357
dcw 544110447
dcw 1701017701
dcw 1869182064
dcw 110

dcw 12
OBJ12: # MEMORY DUMP
dcw 1330464077
dcw 1142970706
dcw 173034837

dcw 5
OBJ13: # %08x 
dcw 2016948261
dcw 32

dcw 27
OBJ14: #  Object: Size=%08x t
dcw 1784827680
dcw 980706149
dcw 2053722912
dcw 807746917
dcw 1948284984
dcw 1030058105
dcw 684837

dcw 35
OBJ15: #  Array: Size=%08x Nu
dcw 1920090400
dcw 540703073
dcw 1702521171
dcw 942679357
dcw 1968054392
dcw 1701594477
dcw 1953391981
dcw 807746931
dcw 686136

dcw 27
OBJ16: #  Free: Size=%08x nex
dcw 1701987872
dcw 1394621029
dcw 1030060649
dcw 2016948261
dcw 2019913248
dcw 807746932
dcw 686136

dcw 21
OBJ17: # Buddy allocator dump
dcw 1684305218
dcw 1818304633
dcw 1633906540
dcw 544370548
dcw 1886221668
dcw 10

dcw 9
OBJ18: # Size=%x:-
dcw 1702521171
dcw 980952381
dcw 45

dcw 1
OBJ19: # 
dcw 10

dcw 17
OBJ20: # memory slots full
dcw 1869440365
dcw 1931508082
dcw 1937010540
dcw 1819633184
dcw 108

dcw 10
OBJ21: # %s   %08x
dcw 538997541
dcw 942679328
dcw 2680

dcw 18
OBJ22: # DATA=%08x PC=%08x
dcw 1096040772
dcw 942679357
dcw 1129324664
dcw 942679357
dcw 2680

dcw 9
OBJ23: # $%2d=%08x
dcw 1681007908
dcw 942679357
dcw 120

dcw 1
OBJ24: #  
dcw 32

dcw 15
OBJ25: # OS Starting up
dcw 1394627407
dcw 1953653108
dcw 543649385
dcw 684149

dcw 16
OBJ26: # Allocating task
dcw 1869376577
dcw 1769234787
dcw 1948280686
dcw 174814049

dcw 23
OBJ27: # Allocated task at %0
dcw 1869376577
dcw 1702125923
dcw 1635000420
dcw 1629514611
dcw 807739508
dcw 686136

dcw 24
OBJ28: # Allocated stack at %
dcw 1869376577
dcw 1702125923
dcw 1953701988
dcw 543908705
dcw 622883937
dcw 175650864

dcw 26
OBJ29: # Allocated globals at
dcw 1869376577
dcw 1702125923
dcw 1818697828
dcw 1818321519
dcw 1952522355
dcw 942679328
dcw 2680

dcw 13
OBJ30: # Running task
dcw 1852732754
dcw 543649385
dcw 1802723700
dcw 10

dcw 23
OBJ31: # Hello from myFirstTa
dcw 1819043144
dcw 1919295599
dcw 1830841711
dcw 1919501945
dcw 1632924787
dcw 682867

dcw 4
OBJ32: # List
dcw 1953720652

dcw 6
OBJ33: # HwRegs
dcw 1699903304
dcw 29543

dcw 12
OBJ34: # FreeMemBlock
dcw 1701147206
dcw 1114465613
dcw 1801678700

dcw 13
OBJ35: # ArrayMemBlock
dcw 1634890305
dcw 1835355513
dcw 1668246594
dcw 107

dcw 14
OBJ36: # ObjectMemBlock
dcw 1701470799
dcw 1699574883
dcw 1869365869
dcw 27491

dcw 15
OBJ37: # ClassDescriptor
dcw 1935764547
dcw 1936016499
dcw 1885958755
dcw 7499636

dcw 16
OBJ38: # TaskControlBlock
dcw 1802723668
dcw 1953394499
dcw 1114402674
dcw 1801678700

dcw 7
OBJ39: # Blitter
dcw 1953066050
dcw 7497076

dcw 8
OBJ40: # VgaLayer
dcw 1281451862
dcw 1919252833

dcw 15
OBJ41: # GraphicsContext
dcw 1885434439
dcw 1935894888
dcw 1953394499
dcw 7632997

dcw 6
OBJ42: # Window
dcw 1684957527
dcw 30575

dcw 13
OBJ43: # WindowManager
dcw 1684957527
dcw 1632466799
dcw 1701273966
dcw 114

