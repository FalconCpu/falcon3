const TITLE_BAR_HEIGHT = 16
const WINDOW_BORDER_WIDTH = 2

class VgaLayerHardware
    var addr : Int
    var x1  : Int
    var y1  : Int
    var x2  : Int
    var y2  : Int
    var bpl : Int
    var bpp : Int

class Window(var x:Int, var y:Int, var width:Int, var height:Int, var title:String, var layerNumber:Int)
    var bitmap = allocateBlock(width*height) & MASK_ADDRESS_ONLY
    var clip1 = (TITLE_BAR_HEIGHT<<16) | WINDOW_BORDER_WIDTH
    var clip2 = (height-WINDOW_BORDER_WIDTH)<<16 | (width-WINDOW_BORDER_WIDTH)

    fun updateLayerHardware()
        val layer = (0xE0001000 + 32*layerNumber) as VgaLayerHardware
        kprintf("Updating layer hardware %d to %08x %d,%d %d,%d\n", layerNumber, bitmap,x,y,x+width,y+height)
        layer.addr = bitmap
        layer.x1 = x
        layer.y1 = y
        layer.x2 = x + width
        layer.y2 = y + height
        layer.bpl = width
        layer.bpp = 1

    fun drawBorders(active:Bool)
        # Since the coordinate system is set to interior of the window, the border is drawn to negative coordinates!
        setBlitDestWindow(this)
        val titleColor = if active then 15 else 0
        val borderColor = 255
        drawRect(0,0,width,TITLE_BAR_HEIGHT,titleColor)
        drawLine(0,0, width-1,0,borderColor)
        drawLine(0,0, 0,height-1,borderColor)
        # drawLine(width-1,height-1,0,height-1,borderColor)
        # drawLine(width-1,height-1,width-1,0,borderColor)
        # Restore the clipping window to the interior of the window
        setBlitDestWindow(this)

    fun move(newX:Int, newY:Int)
        if x=newX and y=newY
            return
        if newX>0 and newX<640 
            x = newX
        if newY>0 and newY<480
            y = newY
        updateLayerHardware()


class WindowManager
    val windows = new List<Window>()
    var prevMouseButton = 0
    var activeWindow : Window? = null
    var draggingWindow : Window? = null
    var dragX = 0
    var dragY = 0

    fun newWindow(title:String, x:Int, y:Int, width:Int, height:Int) -> Window
        val wdw = new Window(x,y,width,height,title, windows.size)
        windows.add(wdw)
        kprintf("New window at %d,%d\n", x, y)
        # TODO - handle layers properly -> for now let's just count
        wdw.updateLayerHardware()
        setActiveWindow(wdw)
        kprintf("Activated window\n")
        return wdw

    fun getWindowAt(x:Int, y:Int) -> Window?
        var ret : Window? = null
        for wdw in windows
            if x >= wdw.x and x < wdw.x+wdw.width and y >= wdw.y and y < wdw.y+wdw.height
                ret = wdw
        return ret

    fun checkForEvents()
        val hwRegs = 0xE0000000 as HwRegs
        val mouse_x = hwRegs.mouse_x
        val mouse_y = hwRegs.mouse_y
        val mouse_btn = hwRegs.mouse_btn

        val dw = draggingWindow

        if dw != null
            if mouse_btn = 0
                draggingWindow = null
            else
                dw.move(mouse_x-dragX, mouse_y-dragY)
        else if mouse_btn = 1 and prevMouseButton = 0
            val wdw = getWindowAt(mouse_x, mouse_y)
            setActiveWindow(wdw)
            if wdw != null                
                moveToFront(wdw)
                dragX = mouse_x - wdw.x
                dragY = mouse_y - wdw.y
                if dragY < TITLE_BAR_HEIGHT
                    draggingWindow = wdw

        else if mouse_btn = 4 and prevMouseButton = 0
            val wdw = getWindowAt(mouse_x, mouse_y)
            if wdw != null and mouse_y-wdw.y < TITLE_BAR_HEIGHT
                moveToBack(wdw)
        
        prevMouseButton = mouse_btn

    fun setActiveWindow(active:Window?)
        if activeWindow = active
            return
        activeWindow = active
        for wdw in windows
            wdw.drawBorders(wdw = active)

    fun moveToFront(wdw:Window)
        if windows.last()=wdw
            return
        windows.remove(wdw)
        windows.add(wdw)
        for i in 0..<windows.size
            windows[i].layerNumber = i
            windows[i].updateLayerHardware()

    fun moveToBack(wdw:Window)
        if windows.first()=wdw
            return
        windows.remove(wdw)
        windows.addAt(0,wdw)
        for i in 0..<windows.size
            windows[i].layerNumber = i
            windows[i].updateLayerHardware()
