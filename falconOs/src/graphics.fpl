
class Blitter
    var cmd : Int 
    var arg1: Int
    var arg2: Int
    var arg3: Int
const blitter  = 0xE0002000 as Blitter

class Font(val bitmap:Int, val width:Int, val height:Int)
var currentFont : Font? = null

var blitDestWindow : Window? = null    # Keep track of the current destination window
var blitSrcWindow  : Window? = null
var blitFont : Font? = null



# Blitter Commands
const BLIT_SET_DEST   = 0x81       # arg1=bitmap addr, arg2=offset_y/x arg3=bytes per line
const BLIT_SET_CLIP   = 0x82       # arg1=y1/x1, arg2=y2/x2
const BLIT_SET_SRC    = 0x83       # arg1=bitmap addr, arg2=offset_y/x arg3=bytes per line
const BLIT_FONT       = 0x84       # arg1=font addr, arg2=Offset/BytePerChar/Height/Width 
const BLIT_RECT       = 0x01       # arg1=y1/x1, arg2=y2/x2 arg3=color
const BLIT_LINE       = 0x02       # arg1=y1/x1, arg2=y2/x2 arg3=color
const BLIT_IMAGE      = 0x03       # arg1=desty/x arg2=srcy/x arg3=height/width
const BLIT_IMAGE_T    = 0x04       # arg1=desty/x arg2=srcy/x arg3=height/width     With transparent color
const BLIT_CHAR       = 0x05       # arg1=y/x, arg2=char   arg3=bgcolor/fgcolor
const BLIT_CHAR_T     = 0x06       # arg1=y/x, arg2=char   arg3=fgcolor        

fun setBlitDestWindow(window:Window)
    blitDestWindow = window
    blitter.arg1 = window.bitmap
    blitter.arg2 = window.clip1
    blitter.arg3 = window.width
    blitter.cmd = BLIT_SET_DEST
    
    blitter.arg1 = window.clip1
    blitter.arg2 = window.clip2
    blitter.cmd = BLIT_SET_CLIP


fun drawLine(x1:Int, y1:Int, x2:Int, y2:Int, color:Int)
    blitter.arg1 = y1<<16 | x1
    blitter.arg2 = y2<<16 | x2
    blitter.arg3 = color
    blitter.cmd = BLIT_LINE

fun drawRect(x1:Int, y1:Int, x2:Int, y2:Int, color:Int)
    blitter.arg1 = y1<<16 | x1
    blitter.arg2 = y2<<16 | x2
    blitter.arg3 = color
    blitter.cmd = BLIT_RECT


# #########################################################################
#                      GRAPHICS COMMAND BLOCK
# #########################################################################
# User code will provide us with blocks of graphics commands to execute.

const GFX_DRAW_RECT       = 0x01
const GFX_DRAW_LINE       = 0x02
const GFX_DRAW_IMAGE      = 0x03
const GFX_DRAW_IMAGE_T    = 0x04
const GFX_DRAW_CHAR       = 0x05
const GFX_DRAW_TEXT       = 0x06


class GfxCommandBlock(val task: TaskControlBlock, val destWindow: Window,val commands:Array<Int>, val size:Int)
    var ptr = 0    # Current location in the array
    var next : GfxCommandBlock? = null

    fun run() ->  Bool
        # Run the graphics commands in this block. 
        # Returns true if the block is complete, false if it needs to be re-run

        # First check the blitter fifo has space for a few commands.
        if blitter.cmd < 10
            return false

        # We have space - so next ensure the blitter is set up to draw to the correct window
        if blitDestWindow != destWindow
            setBlitDestWindow(destWindow)

        # Now run the commands
        while true
            if ptr >= size
                return true
            if blitter.cmd < 2  # If the blitte fifo is nearly full then stop sending commands for now
                return false

            val cmd = commands[ptr]
            ptr += 1
            when cmd
                GFX_DRAW_RECT ->  # Args = y1/x1, y2/x2, color
                    if ptr+3 >= size
                        return false
                    blitter.arg1 = commands[ptr+0]
                    blitter.arg2 = commands[ptr+1]
                    blitter.arg3 = commands[ptr+2]
                    blitter.cmd = BLIT_RECT
                    ptr += 3

                GFX_DRAW_LINE ->  # Args = y1/x1, y2/x2, color
                    if ptr+3 >= commands.size
                        return false
                    blitter.arg1 = commands[ptr+0]
                    blitter.arg2 = commands[ptr+1]
                    blitter.arg3 = commands[ptr+2]
                    blitter.cmd = BLIT_LINE
                    ptr += 3

                # more commands to add here
                    #

