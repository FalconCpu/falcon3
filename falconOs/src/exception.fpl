
enum ExceptionCause[NONE,
    INSTRUCTION_ACCESS_FAULT,
    ILLEGAL_INSTRUCTION,
    BREAKPOINT,
    LOAD_ADDRESS_MISALIGNED,
    LOAD_ACCESS_FAULT,
    STORE_ADDRESS_MISALIGNED,
    STORE_ACCESS_FAULT,
    SYSTEM_CALL,
    INDEX_OVERFLOW]

enum SysCall[
    ABORT,
    PRINT_CHAR,
    PRINT_STRING,
    ALLOCATE_MEM,
    FREE_MEM,
    FIND_TASK_BY_NAME,
    SEND_MESSAGE,
    GET_MESSAGE,
    YIELD,
    OPEN_WINDOW,
    CLOSE_WINDOW,
    BLIT_SET_DEST,
    BLIT_SET_SRC,
    BLIT_SET_FONT]


fun handle_exception(tcb:TaskControlBlock, cause:ExceptionCause, data:Int)
    # kprintf("Task %08x: Exception %x PC=%08x DATA=%x $1=%08x $2=%08x\n", tcb, cause, tcb.pc, data, tcb.regs[1], tcb.regs[2])
    if (tcb as Int)=0 then panic("Exception in kernel code",ErrorCode.PROTOCOL_ERROR)
    tcb.runState = TaskStatus.READY
    when cause
        ExceptionCause.SYSTEM_CALL ->
            when data as SysCall
                SysCall.ABORT ->
                    kprintf("Task %s exited with code %d\n", tcb.name, tcb.regs[8])
                    terminateTask(tcb, "Completed", 0)


                SysCall.PRINT_CHAR ->
                    printChar(tcb.regs[1] as Char)

                SysCall.PRINT_STRING ->
                    kPrintBlock(tcb.regs[1] as Array<Char>, tcb.regs[2])

                SysCall.ALLOCATE_MEM ->
                    val block = allocateBlock(tcb.regs[1] as Int)
                    if block = 0
                        tcb.dump()
                        panic("Memory allocation failed",ErrorCode.OUT_OF_MEMORY)
                    kprintf("Allocated block %08x for task %08x\n", block, tcb)
                    tcb.addMemoryBlock(block | DMPU_RW)
                    tcb.regs[8] = block & MASK_ADDRESS_ONLY

                SysCall.FREE_MEM ->
                    # Need to check that the block is valid to be freed - and extract the size from the block
                    # before calling freeBlock
                    kprintf("Not yet implemented: Syscall FREE_MEM\n")

                SysCall.FIND_TASK_BY_NAME ->    
                    val name = tcb.regs[1] as String
                    val task = findTaskByName(tcb.regs[1] as String)
                    tcb.regs[8] = task as Int

                SysCall.SEND_MESSAGE ->
                    # Arg1 is the destination task
                    # Args2..5 are the message data
                    # return 1 for success, 0 for failure
                    val dest = tcb.regs[1] as TaskControlBlock
                    if allTasks.contains(dest)
                        val msg = new Message(tcb, tcb.regs[2], tcb.regs[3], tcb.regs[4], tcb.regs[5])
                        dest.receiveMessage(msg)
                        tcb.regs[8] = 1
                    else
                        kprintf("Task %s not found\n", dest.name)
                        tcb.regs[8] = 0

                SysCall.GET_MESSAGE ->
                    # Arg1 is the location (in user space) to store the message
                    # TODO - check the location where the message is to be stored is valid
                    val userMessage = tcb.regs[1] as Message
                    val msg  = tcb.getMessage()
                    if msg = null
                        # If there is no message then the task will go to sleep. Amend the 
                        # tasks PC to get it to call getMessage() again when it awakes
                        tcb.pc = tcb.pc - 4
                    else
                        userMessage.from = msg.from
                        userMessage.data0 = msg.data0
                        userMessage.data1 = msg.data1
                        userMessage.data2 = msg.data2
                        userMessage.data3 = msg.data3
                        free msg

                SysCall.YIELD ->
                    # Yield the processor to another task
                    taskYielded = true

                else ->
                    terminateTask(tcb, "Unknown system call",data)

        ExceptionCause.INSTRUCTION_ACCESS_FAULT ->
            terminateTask(tcb, "Instruction Access fault",data)

        ExceptionCause.ILLEGAL_INSTRUCTION ->
            terminateTask(tcb, "Illegal Instruction",data)

        ExceptionCause.BREAKPOINT ->
            terminateTask(tcb, "Breakpoint",data)

        ExceptionCause.LOAD_ADDRESS_MISALIGNED ->
            terminateTask(tcb, "Load Address Misaligned",data)

        ExceptionCause.LOAD_ACCESS_FAULT ->
            terminateTask(tcb, "Load Address Fault",data)

        ExceptionCause.STORE_ADDRESS_MISALIGNED ->
            terminateTask(tcb, "Store Address Misaligned",data)

        ExceptionCause.STORE_ACCESS_FAULT ->
            terminateTask(tcb, "Store Address Fault",data)

        ExceptionCause.INDEX_OVERFLOW ->
            terminateTask(tcb, "Index Overflow",data)

        else ->
            terminateTask(tcb, "Unknown exception",data)

    tcb.pc += 4     # resume at the next instruction
    scheduler()



