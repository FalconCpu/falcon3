HWREGS_BASE = 0xE0000000
SEVENSEG = 0x0000
LEDS    = 0x0004
UART_TX = 0x0010
UART_RX = 0x0014
GPIO_0  = 0x0018
GPIO_1  = 0x001C

# CPU reset vector starts at address 0xFFFF0000
# so put a jump here to the start of the bootloader

jmp start
ds 65024        # 64kb-512b of space for the image 


# BOOT PROTOCOL:
# The cpu send a command to the host to request the boot image   (0xB0020000  - line order)
# The host responds with the a word to indicate start of transmission (0xB0020001)
# Followed by a word containing the length of the image (in bytes - must be a multiple of 4)
# Followed by the image data
# Finally a CRC of the image (sum of all words in the image)

start:
ld $20, HWREGS_BASE          # Keep HWREGS_BASE in $20 throughout the bootloader
ld $1, 0x1                   # display 0x000001 on the 7SEG to indicate we starting
stw $1, $20[SEVENSEG]

# Send the request. We can assume the FIFO has space
ld $1, 0xB0
stw $1, $20[UART_TX]
ld $1, 0x02
stw $1, $20[UART_TX]
stw 0, $20[UART_TX]
stw 0, $20[UART_TX]

# Wait for the response
ld $1, 0x2                   # display 2 on the 7SEG to indicate we are waiting for a command
stw $1, $20[SEVENSEG]
jsr uart_read_command_word
ld $16,0xC6D
stw $16, $20[GPIO_1]
ld $1, 0x010002B0      # 0xB0020001 in line order
beq $8, 0, fail
bne $7, $1, fail

# read the  length of the image
ld $1, 0x3                   # display 3 on the 7SEG to indicate we are waiting for a command
stw $1, $20[SEVENSEG]
jsr uart_read_word
stw 0, $20[GPIO_1]
beq $8, 0, fail

# Read the image
ld $10, 0xffff0000       # $10 = write pointer
add $11, $10, $7         # $11 = address of end of image
ld $12, 0                # $12 = CRC
.loop:
stw $10, $20[SEVENSEG]       # display the write pointer on the 7SEG as we progress
jsr uart_read_word
stw $10, $20[GPIO_1]
beq $8, 0, fail
stw $7, $10[0]
stw $10, $20[GPIO_1]
add $12, $7
add $10, 4
bne $10, $11, .loop

# Read the CRC
jsr uart_read_word
stw $12, $20[SEVENSEG]       # finally display the calculated CRC on the 7SEG
beq $8, 0, fail
bne $7, $12, fail

success:
# Ripple the LEDS to indicate success
ld $1, 1
ld $3, 0x800
.loop:
stw $1, $20[LEDS]
ld $2, 1000000
.delay:
sub $2, 1
bne $2, 0, .delay
lsl $1, 1
bne $1, $3, .loop

ld $30, 0xFFFF0000      # set the `return address` to the start of the image
ret


fail:
# FLASH the LEDS to indicate failure
ld $1, 0xff
stw $1, $20[LEDS]
ld $1, 10000000  
.delay:
sub $1, 1
bne $1, 0, .delay
stw 0, $20[LEDS]
jmp start


# ############################################################
#                    UART Read Byte
# ############################################################
# Read a byte from the UART
# Output: $8 = 1 for success, 0 for fail
#         $7 = byte read 

uart_read_byte:
ld $8,1
ld $2, 1000000        # timeout value

.loop:
ldw $7, $20[UART_RX]
bge $7, 0, .end
sub $2, 1
bne $2, 0, .loop
ld $8,0               # Hit the timeout
.end:
stw $7, $20[GPIO_1]
ret


# ############################################################
#                    UART Read Word
# ############################################################
# Read a 32-bit word from UART
# Output: $8 = 1 for success, 0 for fail
#         $7 = word read 
uart_read_word:
ld $27, $30           # save link pointer
ld $8,1


jsr uart_read_byte    # read the first byte
beq $8, 0, end
and $4, $7, 0xFF      # mask to ensure byte sized - and store first byte in $4

uart_read_word_second:
jsr uart_read_byte    # read the second
beq $8, 0, end
and $5, $7, 0xFF      # second byte in $5

jsr uart_read_byte    # read the third
beq $8, 0, end
and $6, $7, 0xFF      # third byte in $6

jsr uart_read_byte    # read the fourth
beq $8, 0, end
and $7, $7, 0xFF      # last byte in $7

lsl $7,24
lsl $6,16              # combine the bytes to form the word
lsl $5,8
or $7, $4
or $7, $5
or $7, $6
end:
ld $30, $27
ret

# ############################################################
#                    UART Read Command Word
# ############################################################
# Drop bytes until we get a 0xB0, then read a word
# Output: $8 = 1 for success, 0 for fail
#         $7 = word read 
uart_read_command_word:
ld $27, $30           # save link pointer
ld $8,1

.loop:
jsr uart_read_byte    # read the first byte
ld $4, 0xB0
beq $4, $7, uart_read_word_second
jmp .loop

