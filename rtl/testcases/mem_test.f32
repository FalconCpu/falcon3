HWREG_BASE = 0xE0000000
HWREG_7SEG = 0x00
HWREG_LED  = 0x04


ld $10, HWREG_BASE  # base address of HWREG
ld $4, 0             # count number of errors
stw 0, $10[HWREG_7SEG]


outerLoop:
stw 0, $10[HWREG_LED]  # turn off LED0 to indicate write phase

# Fill the memory with a known pattern
ld $1, 0            # address pointer
ld $2, 0            # value to store
ld $3, 0x4000000    # end of memory
writeLoop:
stw $2, $1[0]
add $1, 4
add $2, 375              # Generate a somewhat random bit pattern
bne $1, $3, writeLoop

# And read it back
ld $8,1
stw  $8, $10[HWREG_LED]  # turn on one led to indicate start of read phase
ld $1, 0             # address pointer
ld $2, 0             # value to store
readLoop:
ldw $5, $1[0]        # read a word
beq $5, $2, .noError # compare to the expected value
add $4, 1            # if different, increment error count
stw $4, $10[HWREG_7SEG]
.noError:
add $1, 4            # update pointer
add $2, 375          # and expected value
bne $1, $3, readLoop

done:
ld $30,0
ret


# ld $8,0

# flashLoop:
# stw $8, $10[HWREG_LED]
# ld $1, 10000000
# delayLoop:
# sub $1, 1
# bne $1, 0, delayLoop
# xor  $8, 0xff
# jmp flashLoop