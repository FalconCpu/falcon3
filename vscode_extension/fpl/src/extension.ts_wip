import * as vscode from 'vscode';
import * as cp from 'child_process';
import * as path from 'path';
import * as fs from 'fs';

let outputChannel: vscode.OutputChannel;
let symbolDatabase: any = null;
let workspaceRoot: string = '';

export function activate(context: vscode.ExtensionContext) {
  console.log('Extension "fpl" is now active!');

  outputChannel = vscode.window.createOutputChannel('FPL Compiler');
  context.subscriptions.push(outputChannel);

  const diagnostics = vscode.languages.createDiagnosticCollection('fpl');
  context.subscriptions.push(diagnostics);

  // Register hover provider
  const hoverProvider = vscode.languages.registerHoverProvider('fpl', {
    provideHover(document, position) {
      return provideHoverInfo(document, position);
    }
  });
  context.subscriptions.push(hoverProvider);

  // Register definition provider
  const definitionProvider = vscode.languages.registerDefinitionProvider('fpl', {
    provideDefinition(document, position) {
      return provideDefinition(document, position);
    }
  });
  context.subscriptions.push(definitionProvider);

  vscode.workspace.onDidSaveTextDocument(document => {
    if (document.languageId !== 'fpl') return;

    const workspaceFolder = vscode.workspace.getWorkspaceFolder(document.uri);
    const workingDir = workspaceFolder ? workspaceFolder.uri.fsPath : path.dirname(document.uri.fsPath);
    workspaceRoot = workingDir;
    
    // Compile and generate symbol database
    compileAndGenerateSymbols(workingDir, document, diagnostics);
  });
}

function compileAndGenerateSymbols(workingDir: string, document: vscode.TextDocument, diagnostics: vscode.DiagnosticCollection) {
  outputChannel.clear();
  outputChannel.appendLine(`Compiling ${path.basename(document.uri.fsPath)}...`);

  const execOptions: cp.ExecSyncOptions = {
    encoding: 'utf8',
    cwd: workingDir
  };

  try {
    // First, compile normally
    const compilerOutput = cp.execSync(`fplcomp`, execOptions).toString();
    
    // Then generate symbol database
    cp.execSync(`fplcomp --emit-symbols`, execOptions);
    
    // Load the symbol database
    loadSymbolDatabase(workingDir);
    
    outputChannel.appendLine('Compilation successful!');
    
    // Process diagnostics as before...
    processDiagnostics(compilerOutput, workingDir, diagnostics);
    
  } catch (error: any) {
    const compilerOutput = error.stdout ? error.stdout.toString() : error.stderr ? error.stderr.toString() : error.message;
    outputChannel.appendLine('Compilation failed:');
    outputChannel.appendLine(compilerOutput);
    
    processDiagnostics(compilerOutput, workingDir, diagnostics);
    outputChannel.show(true);
  }
}

function loadSymbolDatabase(workingDir: string) {
  const symbolFile = path.join(workingDir, 'symbols.json'); // or whatever you name it
  if (fs.existsSync(symbolFile)) {
    try {
      const content = fs.readFileSync(symbolFile, 'utf8');
      symbolDatabase = JSON.parse(content);
      console.log(`Loaded ${symbolDatabase.symbols.length} symbols`);
    } catch (error) {
      console.error('Failed to load symbol database:', error);
      symbolDatabase = null;
    }
  }
}

function provideHoverInfo(document: vscode.TextDocument, position: vscode.Position): vscode.Hover | undefined {
  if (!symbolDatabase) return undefined;

  const wordRange = document.getWordRangeAtPosition(position);
  if (!wordRange) return undefined;
  
  const word = document.getText(wordRange);
  const filePath = document.uri.fsPath;
  
  // Find symbol at this location
  const symbol = symbolDatabase.symbols.find((s: any) => 
    s.name === word && 
    (s.definition.file === filePath || 
     s.references?.some((ref: any) => 
       ref.file === filePath && 
       ref.line === position.line + 1 && 
       ref.column <= position.character + 1
     ))
  );
  
  if (symbol) {
    return new vscode.Hover([
      `**${symbol.name}** (${symbol.kind})`,
      `Type: \`${symbol.type}\``,
      symbol.description || ''
    ]);
  }
}

function provideDefinition(document: vscode.TextDocument, position: vscode.Position): vscode.Location | undefined {
  if (!symbolDatabase) return undefined;

  const wordRange = document.getWordRangeAtPosition(position);
  if (!wordRange) return undefined;
  
  const word = document.getText(wordRange);
  
  const symbol = symbolDatabase.symbols.find((s: any) => s.name === word);
  if (symbol && symbol.definition) {
    return new vscode.Location(
      vscode.Uri.file(symbol.definition.file),
      new vscode.Position(symbol.definition.line - 1, symbol.definition.column - 1)
    );
  }
}

// Your existing processDiagnostics function...
