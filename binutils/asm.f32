# Generated by Falcon Compiler
# Global vars:-
# heapStart @ 0
# heapEnd @ 4
# freeList @ 8
/initializeMemorySystem():
# heapSize = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, 65536
ld R1, R9
jsr /allocateMemory(Int)
stw R8, R29[0]
ldw R1, R29[0]
add R1, R1, R9
stw R1, R29[4]
ldw R1, R29[0]
stw R1, R29[8]
or R1, R9, 0
ldw R2, R29[8]
stw R1, R2[0]
ld R1, 0
ldw R2, R29[8]
stw R1, R2[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/insertBlockIntoFreeList(FreeMemBlock,Int):
# block = R1
# size = R2
# prev = R3
# p = R4
stw R2, R1[0]
ldw R4, R29[8]
ld R3, 0
jmp .L3
.L1:
ld R3, R4
ldw R4, R4[4]
.L3:
ld R5, 0
bne R4, R5, .L4
jmp .L2
.L4:
ldw R5, R4[0]
blt R5, R2, .L1
.L2:
ld R2, 0
beq R3, R2, .L6
jmp .L8
.L6:
ldw R2, R29[8]
stw R2, R1[4]
stw R1, R29[8]
jmp .L5
.L8:
ldw R2, R3[4]
stw R2, R1[4]
stw R1, R3[4]
.L5:
ret

/mallocInternal(Int):
# newBlock = R1
# sizeSplit = R2
# p = R9
# sizeReq = R3
# prev = R2
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R3, R1
ld R2, 0
ldw R9, R29[8]
jmp .L3
.L1:
ld R2, R9
ldw R9, R9[4]
.L3:
ld R1, 0
bne R9, R1, .L4
jmp .L2
.L4:
ldw R1, R9[0]
blt R1, R3, .L1
.L2:
ld R1, 0
beq R9, R1, .L6
jmp .L5
.L6:
ld R1, 3585
sys 1
.L5:
ld R1, 0
beq R2, R1, .L9
jmp .L11
.L9:
ldw R1, R9[4]
stw R1, R29[8]
jmp .L8
.L11:
ldw R1, R9[4]
stw R1, R2[4]
.L8:
ldw R1, R9[0]
sub R2, R1, R3
ld R1, 0
blt R1, R2, .L13
jmp .L12
.L13:
add R1, R9, R3
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L12:
ld R8, R9
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/mallocObject(ClassDescriptor):
# ret = R8
# klass = R9
# size = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ldw R1, R9[0]
add R1, R1, 8
add R1, R1, 15
and R10, R1, -16
ld R1, R10
jsr /mallocInternal(Int)
or R1, R10, 1
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/mallocArray(Int,Int,Bool):
# ret = R8
# retInt = R8
# numElements = R9
# elementSize = R10
# clear = R11
# size = R12
# ary = R1
# i = R2
# numWords = R3
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R10, R2
ld R11, R3
mul R1, R9, R10
add R1, R1, 8
add R1, R1, 15
and R12, R1, -16
ld R1, R12
jsr /mallocInternal(Int)
or R1, R12, 2
stw R1, R8[0]
stw R9, R8[4]
add R8, R8, 8
bne R11, 0, .L2
jmp .L1
.L2:
mul R1, R9, R10
divs R3, R1, 4
ld R1, R8
ld R2, 0
jmp .L7
.L4:
ld R4, 0
ldw R5, R1[-4]
idx4 R5, R2, R5
add R5, R1, R5
stw R4, R5[0]
add R2, R2, 1
.L7:
blt R2, R3, .L4
.L1:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/free(Int):
# ptr = R1
# block = R3
# size = R2
sub SP, SP, 4
stw R30, SP[0]
ld R2, 0
beq R1, R2, .L2
jmp .L1
.L2:
jmp .L0
.L1:
sub R3, R1, 8
ldw R2, R3[0]
and R1, R2, 15
ld R4, 0
beq R1, R4, .L5
jmp .L4
.L5:
ld R1, 3586
sys 1
.L4:
and R2, R2, -16
ld R1, R3
jsr /insertBlockIntoFreeList(FreeMemBlock,Int)
.L0:
ldw R30, SP[0]
add SP, SP, 4
ret

/dumpMemorySystem():
# p = R9
# size = R10
# block = R11
# type = R12
# sizeAndType = R1
# className = R1
# numElements = R1
sub SP, SP, 68
stw R9, SP[48]
stw R10, SP[52]
stw R11, SP[56]
stw R12, SP[60]
stw R30, SP[64]
ldw R9, R29[0]
ld R1, 0
stw R1, SP[0]
ld R1, OBJ0
add R2, SP, 4
jsr /printf(String,Any...)
jmp .L3
.L1:
ld R11, R9
ldw R1, R11[0]
and R12, R1, 15
and R10, R1, -16
ld R1, 1
stw R1, SP[4]
stw R9, SP[8]
ld R1, OBJ1
add R2, SP, 8
jsr /printf(String,Any...)
ld R1, 1
beq R12, R1, .L5
ld R1, 2
beq R12, R1, .L6
ld R1, 0
beq R12, R1, .L7
jmp .L4
.L5:
ldw R1, R9[4]
ldw R1, R1[4]
ld R2, 2
stw R2, SP[12]
stw R10, SP[16]
stw R1, SP[20]
ld R1, OBJ2
add R2, SP, 16
jsr /printf(String,Any...)
jmp .L4
.L6:
ldw R1, R9[4]
ld R2, 2
stw R2, SP[24]
stw R10, SP[28]
stw R1, SP[32]
ld R1, OBJ3
add R2, SP, 28
jsr /printf(String,Any...)
jmp .L4
.L7:
ld R1, 2
stw R1, SP[36]
stw R10, SP[40]
ldw R1, R11[4]
stw R1, SP[44]
ld R1, OBJ4
add R2, SP, 40
jsr /printf(String,Any...)
.L4:
add R9, R9, R10
.L3:
ldw R1, R29[4]
blt R9, R1, .L1
ldw R9, SP[48]
ldw R10, SP[52]
ldw R11, SP[56]
ldw R12, SP[60]
ldw R30, SP[64]
add SP, SP, 68
ret

/printHex(Int):
# a = R9
# digit = R1
# i = R10
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, 7
ld R11, 0
jmp .L4
.L1:
mul R1, R10, 4
lsr R1, R9, R1
and R1, R1, 15
ld R2, 10
blt R1, R2, .L6
jmp .L8
.L6:
jsr /printChar
jmp .L5
.L8:
add R1, R1, 55
jsr /printChar
.L5:
sub R10, R10, 1
.L4:
bge R10, R11, .L1
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/StringBuilder/resize(Int):
# lengthToCopy = R3
# oldBuffer = R9
# V40 = R3
# this = R10
# newSize = R11
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R10, R1
ld R11, R2
ldw R9, R10[0]
ld R2, 1
ld R3, 1
ld R1, R11
jsr /mallocArray(Int,Int,Bool)
stw R8, R10[0]
ldw R1, R10[4]
bge R11, R1, .L1
jmp .L2
.L1:
ldw R3, R10[4]
jmp .L3
.L2:
ld R3, R11
.L3:
ldw R1, R10[0]
ld R2, R9
jsr /memcpy
beq R9, 0, .L4
ld R1, R9
jsr /free(Int)
.L4:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/StringBuilder/append(String):
# this = R9
# s = R10
# newLength = R11
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[4]
ldw R2, R10[-4]
add R11, R1, R2
ldw R1, R9[0]
ldw R1, R1[-4]
blt R1, R11, .L2
jmp .L1
.L2:
ld R1, R9
ld R2, R11
jsr /StringBuilder/resize(Int)
.L1:
ldw R1, R9[0]
ldw R2, R9[4]
add R1, R1, R2
ld R2, R10
ldw R3, R10[-4]
jsr /memcpy
stw R11, R9[4]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/StringBuilder/appendChar(Char):
# this = R9
# c = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ld R10, R2
ldw R1, R9[4]
ldw R2, R9[0]
ldw R2, R2[-4]
beq R1, R2, .L2
jmp .L1
.L2:
ldw R1, R9[4]
mul R2, R1, 2
ld R1, R9
jsr /StringBuilder/resize(Int)
.L1:
ldw R1, R9[0]
ldw R2, R9[4]
ldw R3, R1[-4]
idx1 R2, R2, R3
add R1, R1, R2
stb R10, R1[0]
ldw R1, R9[4]
add R1, R1, 1
stw R1, R9[4]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/StringBuilder/appendInt(Int,Int):
# i = R2
# fieldWidth = R3
# n = R2
# this = R9
# index = R1
# minus = R4
# i = R10
# x = R2
# V38 = R4
sub SP, SP, 28
stw R9, SP[12]
stw R10, SP[16]
stw R11, SP[20]
stw R30, SP[24]
ld R9, R1
add R4, SP, 0
add R1, R4, 12
.L1:
stw 0, R4[0]
add R4, R4, 4
blt R4, R1, .L1
ld R1, 0
ld R4, 0
ld R5, 0
blt R2, R5, .L3
jmp .L2
.L3:
ld R4, 1
ld R5, 0
sub R2, R5, R2
.L2:
.L5:
mods R5, R2, 10
add R5, R5, 48
add R6, SP, 0
ld R7, 12
idx1 R7, R1, R7
add R6, R6, R7
stb R5, R6[0]
divs R2, R2, 10
add R1, R1, 1
ld R5, 0
beq R2, R5, .L6
jmp .L5
.L6:
bne R4, 0, .L9
jmp .L8
.L9:
ld R2, 45
add R4, SP, 0
ld R5, 12
idx1 R5, R1, R5
add R4, R4, R5
stb R2, R4[0]
add R1, R1, 1
.L8:
ld R2, 0
sub R3, R3, R1
jmp .L14
.L11:
ld R4, 32
add R5, SP, 0
add R6, R1, R2
ld R7, 12
idx1 R6, R6, R7
add R5, R5, R6
stb R4, R5[0]
add R2, R2, 1
.L14:
blt R2, R3, .L11
sub R10, R1, 1
ld R11, 0
jmp .L18
.L15:
add R1, SP, 0
ld R2, 12
idx1 R2, R10, R2
add R1, R1, R2
ldb R2, R1[0]
ld R1, R9
jsr /StringBuilder/appendChar(Char)
sub R10, R10, 1
.L18:
bge R10, R11, .L15
ldw R9, SP[12]
ldw R10, SP[16]
ldw R11, SP[20]
ldw R30, SP[24]
add SP, SP, 28
ret

/StringBuilder/appendHex(Int,Int):
# i = R2
# fieldWidth = R3
# n = R2
# this = R9
# index = R1
# i = R10
# x = R2
# V46 = R4
# V38 = R4
# digit = R4
sub SP, SP, 24
stw R9, SP[8]
stw R10, SP[12]
stw R11, SP[16]
stw R30, SP[20]
ld R9, R1
add R4, SP, 0
add R1, R4, 8
.L1:
stw 0, R4[0]
add R4, R4, 4
blt R4, R1, .L1
ld R1, 0
.L2:
and R4, R2, 15
ld R5, 9
bge R5, R4, .L5
jmp .L6
.L5:
add R4, R4, 48
jmp .L7
.L6:
sub R4, R4, 10
add R4, R4, 65
.L7:
add R5, SP, 0
ld R6, 8
idx1 R6, R1, R6
add R5, R5, R6
stb R4, R5[0]
lsr R2, R2, 4
add R1, R1, 1
ld R4, 0
beq R2, R4, .L3
jmp .L2
.L3:
ld R2, 0
sub R3, R3, R1
jmp .L11
.L8:
ld R4, 32
add R5, SP, 0
add R6, R1, R2
ld R7, 8
idx1 R6, R6, R7
add R5, R5, R6
stb R4, R5[0]
add R2, R2, 1
.L11:
blt R2, R3, .L8
sub R10, R1, 1
ld R11, 0
jmp .L15
.L12:
add R1, SP, 0
ld R2, 8
idx1 R2, R10, R2
add R1, R1, R2
ldb R2, R1[0]
ld R1, R9
jsr /StringBuilder/appendChar(Char)
sub R10, R10, 1
.L15:
bge R10, R11, .L12
ldw R9, SP[8]
ldw R10, SP[12]
ldw R11, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/StringBuilder/toString():
# this = R9
# ret = R10
sub SP, SP, 12
stw R9, SP[0]
stw R10, SP[4]
stw R30, SP[8]
ld R9, R1
ldw R1, R9[4]
ld R2, 1
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
ld R10, R8
ld R1, R10
ldw R2, R9[0]
ldw R3, R9[4]
jsr /memcpy
ld R8, R10
ldw R9, SP[0]
ldw R10, SP[4]
ldw R30, SP[8]
add SP, SP, 12
ret

/StringBuilder/free():
# this = R1
sub SP, SP, 4
stw R30, SP[0]
ldw R1, R1[0]
beq R1, 0, .L1
jsr /free(Int)
.L1:
ldw R30, SP[0]
add SP, SP, 4
ret

/List/add(T):
# this = R9
# item = R10
# oldArray = R11
# i = R1
sub SP, SP, 16
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R30, SP[12]
ld R9, R1
ld R10, R2
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R11, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R11[-4]
jmp .L7
.L4:
ldw R3, R11[-4]
idx4 R3, R1, R3
add R3, R11, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R11, 0, .L8
ld R1, R11
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[4]
ldw R2, R9[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R30, SP[12]
add SP, SP, 16
ret

/List/get(Int):
# this = R1
# index = R2
ldw R1, R1[4]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/set(Int,T):
# this = R1
# index = R2
# item = R3
ldw R1, R1[4]
ldw R4, R1[-4]
idx4 R2, R2, R4
add R1, R1, R2
stw R3, R1[0]
ret

/List/isEmpty():
# this = R1
ldw R1, R1[0]
xor R8, R1, 0
cltu R8, R8, 1
ret

/List/isNotEmpty():
# this = R1
ldw R1, R1[0]
clt R8, R1, 1
xor R8, R8, 1
ret

/List/take():
# this = R2
ld R2, R1
ldw R1, R2[0]
ld R3, 0
beq R1, R3, .L2
jmp .L1
.L2:
ld R1, 3588
sys 1
.L1:
ldw R1, R2[0]
sub R1, R1, 1
stw R1, R2[0]
ldw R1, R2[4]
ldw R2, R2[0]
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
ret

/List/clear():
# this = R1
ld R2, 0
stw R2, R1[0]
ret

/List/removeAt(Int):
# this = R1
# index = R2
# i = R2
# ret = R8
ldw R3, R1[4]
ldw R4, R3[-4]
idx4 R4, R2, R4
add R3, R3, R4
ldw R8, R3[0]
ldw R3, R1[0]
sub R3, R3, 1
jmp .L4
.L1:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L4:
blt R2, R3, .L1
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ret

/List/remove(T):
# this = R1
# item = R2
# j = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R2, R3
ldw R3, R1[0]
sub R3, R3, 1
jmp .L11
.L8:
ldw R4, R1[4]
add R5, R2, 1
ldw R6, R4[-4]
idx4 R5, R5, R6
add R4, R4, R5
ldw R4, R4[0]
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R2, R6
add R5, R5, R6
stw R4, R5[0]
add R2, R2, 1
.L11:
blt R2, R3, .L8
ldw R2, R1[0]
sub R2, R2, 1
stw R2, R1[0]
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/indexOf(T):
# this = R1
# item = R2
# i = R8
ld R8, 0
ldw R3, R1[0]
jmp .L4
.L1:
ldw R4, R1[4]
ldw R5, R4[-4]
idx4 R5, R8, R5
add R4, R4, R5
ldw R4, R4[0]
beq R4, R2, .L6
jmp .L5
.L6:
jmp .L0
.L5:
add R8, R8, 1
.L4:
blt R8, R3, .L1
ld R8, -1
.L0:
ret

/List/addAt(Int,T):
# this = R9
# item = R10
# index = R11
# oldArray = R12
# i = R1
# i = R1
sub SP, SP, 20
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R30, SP[16]
ld R9, R1
ld R11, R2
ld R10, R3
ldw R1, R9[0]
ldw R2, R9[4]
ldw R2, R2[-4]
bge R1, R2, .L2
jmp .L1
.L2:
ldw R12, R9[4]
ldw R1, R9[4]
ldw R1, R1[-4]
mul R1, R1, 2
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ld R1, 0
ldw R2, R12[-4]
jmp .L7
.L4:
ldw R3, R12[-4]
idx4 R3, R1, R3
add R3, R12, R3
ldw R3, R3[0]
ldw R4, R9[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
stw R3, R4[0]
add R1, R1, 1
.L7:
blt R1, R2, .L4
beq R12, 0, .L8
ld R1, R12
jsr /free(Int)
.L8:
.L1:
ldw R1, R9[0]
sub R1, R1, 1
jmp .L12
.L9:
ldw R2, R9[4]
ldw R3, R2[-4]
idx4 R3, R1, R3
add R2, R2, R3
ldw R2, R2[0]
ldw R3, R9[4]
add R4, R1, 1
ldw R5, R3[-4]
idx4 R4, R4, R5
add R3, R3, R4
stw R2, R3[0]
sub R1, R1, 1
.L12:
bge R1, R11, .L9
ldw R1, R9[4]
ldw R2, R1[-4]
idx4 R2, R11, R2
add R1, R1, R2
stw R10, R1[0]
ldw R1, R9[0]
add R1, R1, 1
stw R1, R9[0]
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R30, SP[16]
add SP, SP, 20
ret

/List/contains(T):
# this = R1
# item = R2
# i = R3
ld R3, 0
ldw R4, R1[0]
jmp .L4
.L1:
ldw R5, R1[4]
ldw R6, R5[-4]
idx4 R6, R3, R6
add R5, R5, R6
ldw R5, R5[0]
beq R5, R2, .L6
jmp .L5
.L6:
ld R8, 1
jmp .L0
.L5:
add R3, R3, 1
.L4:
blt R3, R4, .L1
ld R8, 0
.L0:
ret

/List/last():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R2, R1[4]
ldw R1, R1[0]
sub R1, R1, 1
ldw R3, R2[-4]
idx4 R1, R1, R3
add R1, R2, R1
ldw R8, R1[0]
.L0:
ret

/List/first():
# this = R1
ldw R2, R1[0]
ld R3, 0
beq R2, R3, .L2
jmp .L1
.L2:
ld R8, 0
jmp .L0
.L1:
ldw R1, R1[4]
ld R2, 0
ldw R3, R1[-4]
idx4 R2, R2, R3
add R1, R1, R2
ldw R8, R1[0]
.L0:
ret

/BitVector/set(Int):
# index = R2
# this = R3
# wordIndex = R1
# bitIndex = R2
ld R3, R1
ld R1, 0
blt R2, R1, .L2
ldw R1, R3[0]
bge R2, R1, .L2
jmp .L1
.L2:
ld R1, 3600
sys 1
.L1:
lsr R1, R2, 5
and R2, R2, 31
ldw R4, R3[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
ldw R4, R4[0]
ld R5, 1
lsl R2, R5, R2
or R2, R4, R2
ldw R3, R3[4]
ldw R4, R3[-4]
idx4 R1, R1, R4
add R1, R3, R1
stw R2, R1[0]
ret

/BitVector/clear(Int):
# index = R2
# this = R3
# wordIndex = R1
# bitIndex = R2
ld R3, R1
ld R1, 0
blt R2, R1, .L2
ldw R1, R3[0]
bge R2, R1, .L2
jmp .L1
.L2:
ld R1, 3600
sys 1
.L1:
lsr R1, R2, 5
and R2, R2, 31
ldw R4, R3[4]
ldw R5, R4[-4]
idx4 R5, R1, R5
add R4, R4, R5
ldw R4, R4[0]
ld R5, 1
lsl R2, R5, R2
xor R2, R2, -1
and R2, R4, R2
ldw R3, R3[4]
ldw R4, R3[-4]
idx4 R1, R1, R4
add R1, R3, R1
stw R2, R1[0]
ret

/BitVector/get(Int):
# index = R2
# this = R3
# bitIndex = R1
# wordIndex = R4
ld R3, R1
ld R1, 0
blt R2, R1, .L2
ldw R1, R3[0]
bge R2, R1, .L2
jmp .L1
.L2:
ld R1, 3600
sys 1
.L1:
lsr R4, R2, 5
and R1, R2, 31
ldw R2, R3[4]
ldw R3, R2[-4]
idx4 R3, R4, R3
add R2, R2, R3
ldw R2, R2[0]
ld R3, 1
lsl R1, R3, R1
and R1, R2, R1
xor R8, R1, 0
cltu R8, 0, R8
ret

/BitVector/findFirstFree():
# this = R1
# wordIndex = R2
# word = R4
# bitIndex = R5
ld R2, 0
ldw R3, R1[4]
ldw R3, R3[-4]
jmp .L4
.L1:
ldw R4, R1[4]
ldw R5, R4[-4]
idx4 R5, R2, R5
add R4, R4, R5
ldw R4, R4[0]
ld R5, -1
bne R4, R5, .L6
jmp .L5
.L6:
ld R5, 0
ld R6, 31
jmp .L11
.L8:
ld R7, 1
lsl R7, R7, R5
and R7, R4, R7
ld R8, 0
beq R7, R8, .L13
jmp .L12
.L13:
lsl R1, R2, 5
or R8, R1, R5
jmp .L0
.L12:
add R5, R5, 1
.L11:
bge R6, R5, .L8
.L5:
add R2, R2, 1
.L4:
blt R2, R3, .L1
ld R8, -1
.L0:
ret

/printString(String,Int,Justify):
# width = R2
# justify = R9
# s = R10
# pad = R11
# i = R12
# i = R12
# i = R9
sub SP, SP, 24
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R30, SP[20]
ld R10, R1
ld R9, R3
ldw R1, R10[-4]
sub R11, R2, R1
ld R1, 0
bne R9, R1, .L2
jmp .L1
.L2:
ld R12, 0
jmp .L7
.L4:
ld R1, 32
jsr /printChar
add R12, R12, 1
.L7:
blt R12, R11, .L4
.L1:
ld R12, 0
ldw R13, R10[-4]
jmp .L11
.L8:
ldw R1, R10[-4]
idx1 R1, R12, R1
add R1, R10, R1
ldb R1, R1[0]
jsr /printChar
add R12, R12, 1
.L11:
blt R12, R13, .L8
ld R1, 0
beq R9, R1, .L13
jmp .L12
.L13:
ld R9, 0
jmp .L18
.L15:
ld R1, 32
jsr /printChar
add R9, R9, 1
.L18:
blt R9, R11, .L15
.L12:
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R30, SP[20]
add SP, SP, 24
ret

/printInt(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# minus = R9
# index = R10
# pad = R11
# i = R9
# i = R9
# i = R9
# i = R12
# i = R9
# i = R9
# V44 = R5
sub SP, SP, 36
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R12, SP[28]
stw R30, SP[32]
ld R9, 0
ld R4, 0
blt R1, R4, .L2
jmp .L1
.L2:
ld R9, 1
ld R4, 0
sub R1, R4, R1
.L1:
add R5, SP, 0
add R4, R5, 16
.L4:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L4
ld R10, 0
.L5:
mods R4, R1, 10
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R10, R6
add R5, R5, R6
stb R4, R5[0]
add R10, R10, 1
divs R1, R1, 10
ld R4, 0
beq R1, R4, .L6
jmp .L5
.L6:
sub R1, R2, R10
sub R11, R1, R9
ld R1, 0
beq R3, R1, .L9
ld R1, 1
beq R3, R1, .L10
jmp .L11
jmp .L8
.L9:
ld R1, 1
beq R9, R1, .L13
jmp .L12
.L13:
ld R1, 45
jsr /printChar
.L12:
sub R9, R10, 1
ld R10, 0
jmp .L18
.L15:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L18:
bge R9, R10, .L15
ld R9, 0
jmp .L22
.L19:
ld R1, 32
jsr /printChar
add R9, R9, 1
.L22:
blt R9, R11, .L19
jmp .L8
.L10:
ld R12, 0
jmp .L26
.L23:
ld R1, 32
jsr /printChar
add R12, R12, 1
.L26:
blt R12, R11, .L23
ld R1, 1
beq R9, R1, .L28
jmp .L27
.L28:
ld R1, 45
jsr /printChar
.L27:
sub R9, R10, 1
ld R10, 0
jmp .L33
.L30:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L33:
bge R9, R10, .L30
jmp .L8
.L11:
ld R1, 1
beq R9, R1, .L35
jmp .L34
.L35:
ld R1, 45
jsr /printChar
.L34:
ld R9, 0
jmp .L40
.L37:
ld R1, 48
jsr /printChar
add R9, R9, 1
.L40:
blt R9, R11, .L37
sub R9, R10, 1
ld R10, 0
jmp .L44
.L41:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L44:
bge R9, R10, .L41
.L8:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R12, SP[28]
ldw R30, SP[32]
add SP, SP, 36
ret

/printHex(Int,Int,Justify):
# value = R1
# width = R2
# justify = R3
# n = R1
# index = R9
# pad = R10
# i = R9
# i = R9
# i = R9
# i = R11
# i = R11
# i = R9
# V38 = R5
# digit = R4
sub SP, SP, 32
stw R9, SP[16]
stw R10, SP[20]
stw R11, SP[24]
stw R30, SP[28]
add R5, SP, 0
add R4, R5, 16
.L1:
stw 0, R5[0]
add R5, R5, 4
blt R5, R4, .L1
ld R9, 0
.L2:
and R4, R1, 15
ld R5, 10
blt R4, R5, .L6
jmp .L8
.L6:
add R4, R4, 48
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
jmp .L5
.L8:
sub R4, R4, 10
add R4, R4, 65
add R5, SP, 0
ld R6, 16
idx1 R6, R9, R6
add R5, R5, R6
stb R4, R5[0]
.L5:
add R9, R9, 1
lsr R1, R1, 4
ld R4, 0
beq R1, R4, .L3
jmp .L2
.L3:
sub R10, R2, R9
ld R1, 0
beq R3, R1, .L10
ld R1, 1
beq R3, R1, .L11
jmp .L12
jmp .L9
.L10:
sub R9, R9, 1
ld R11, 0
jmp .L16
.L13:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L16:
bge R9, R11, .L13
ld R9, 0
jmp .L20
.L17:
ld R1, 32
jsr /printChar
add R9, R9, 1
.L20:
blt R9, R10, .L17
jmp .L9
.L11:
ld R11, 0
jmp .L24
.L21:
ld R1, 32
jsr /printChar
add R11, R11, 1
.L24:
blt R11, R10, .L21
sub R9, R9, 1
ld R10, 0
jmp .L28
.L25:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L28:
bge R9, R10, .L25
jmp .L9
.L12:
ld R11, 0
jmp .L32
.L29:
ld R1, 48
jsr /printChar
add R11, R11, 1
.L32:
blt R11, R10, .L29
sub R9, R9, 1
ld R10, 0
jmp .L36
.L33:
add R1, SP, 0
ld R2, 16
idx1 R2, R9, R2
add R1, R1, R2
ldb R1, R1[0]
jsr /printChar
sub R9, R9, 1
.L36:
bge R9, R10, .L33
.L9:
ldw R9, SP[16]
ldw R10, SP[20]
ldw R11, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/printf(String,Any...):
# format = R1
# c = R1
# args = R9
# width = R11
# justify = R12
# index = R13
# V45 = R14
# inPercent = R15
sub SP, SP, 32
stw R9, SP[0]
stw R10, SP[4]
stw R11, SP[8]
stw R12, SP[12]
stw R13, SP[16]
stw R14, SP[20]
stw R15, SP[24]
stw R30, SP[28]
ld R9, R2
ld R15, 0
ld R11, 0
ld R12, 1
ld R13, 0
ldw R2, R1[-4]
mul R2, R2, 1
add R10, R1, R2
ld R14, R1
jmp .L3
.L1:
ldb R1, R14[0]
bne R15, 0, .L6
jmp .L8
.L6:
ld R2, 100
beq R1, R2, .L10
jmp .L12
.L10:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /printInt(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L9
.L12:
ld R2, 120
beq R1, R2, .L14
jmp .L16
.L14:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /printHex(Int,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L13
.L16:
ld R2, 115
beq R1, R2, .L18
jmp .L20
.L18:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
ld R2, R11
ld R3, R12
jsr /printString(String,Int,Justify)
add R13, R13, 1
ld R15, 0
jmp .L17
.L20:
ld R2, 99
beq R1, R2, .L22
jmp .L24
.L22:
ldw R1, R9[-4]
idx4 R1, R13, R1
add R1, R9, R1
ldw R1, R1[0]
jsr /printChar
add R13, R13, 1
ld R15, 0
jmp .L21
.L24:
ld R2, 48
beq R1, R2, .L28
jmp .L27
.L28:
ld R2, 0
beq R11, R2, .L26
.L27:
jmp .L29
.L26:
ld R12, 2
jmp .L25
.L29:
ld R2, 45
beq R1, R2, .L33
jmp .L32
.L33:
ld R2, 0
beq R11, R2, .L31
.L32:
jmp .L34
.L31:
ld R12, 0
jmp .L30
.L34:
ld R2, 48
bge R1, R2, .L38
jmp .L37
.L38:
ld R2, 57
bge R2, R1, .L36
.L37:
jmp .L39
.L36:
mul R2, R11, 10
sub R1, R1, 48
add R11, R2, R1
jmp .L35
.L39:
jsr /printChar
ld R15, 0
.L35:
.L30:
.L25:
.L21:
.L17:
.L13:
.L9:
jmp .L5
.L8:
ld R2, 37
beq R1, R2, .L41
jmp .L43
.L41:
ld R15, 1
ld R11, 0
ld R12, 1
jmp .L40
.L43:
jsr /printChar
.L40:
.L5:
add R14, R14, 1
.L3:
blt R14, R10, .L1
ldw R9, SP[0]
ldw R10, SP[4]
ldw R11, SP[8]
ldw R12, SP[12]
ldw R13, SP[16]
ldw R14, SP[20]
ldw R15, SP[24]
ldw R30, SP[28]
add SP, SP, 32
ret

/FreeMemBlock:
# this = R1
ret

/ArrayMemBlock:
# this = R1
ret

/ObjectMemBlock:
# this = R1
ret

/ClassDescriptor:
# this = R1
# heapStart = R1
# heapEnd = R1
# freeList = R1
ret

/StringBuilder:
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ld R1, 8
ld R2, 1
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[0]
ld R1, 0
stw R1, R9[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/List:
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
ld R1, 0
stw R1, R9[0]
ld R1, 8
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

/BitVector:
# size = R2
# this = R9
sub SP, SP, 8
stw R9, SP[0]
stw R30, SP[4]
ld R9, R1
stw R2, R9[0]
ld R1, 1
ld R2, 4
ld R3, 1
jsr /mallocArray(Int,Int,Bool)
stw R8, R9[4]
ldw R9, SP[0]
ldw R30, SP[4]
add SP, SP, 8
ret

FreeMemBlock/class:
dcw 8
dcw OBJ5

ArrayMemBlock/class:
dcw 8
dcw OBJ6

ObjectMemBlock/class:
dcw 8
dcw OBJ7

ClassDescriptor/class:
dcw 8
dcw OBJ8

StringBuilder/class:
dcw 8
dcw OBJ9

List/class:
dcw 8
dcw OBJ10

BitVector/class:
dcw 8
dcw OBJ11

dcw 12
OBJ0: # MEMORY DUMP
dcw 1330464077
dcw 1142970706
dcw 173034837

dcw 6
OBJ1: # %08x: 
dcw 2016948261
dcw 8250

dcw 26
OBJ2: # Object: Size=%-8d ty
dcw 1701470799
dcw 540701795
dcw 1702521171
dcw 942482749
dcw 2037653604
dcw 624780656
dcw 2675

dcw 32
OBJ3: # Array: Size=%-8d Num
dcw 1634890305
dcw 1394621049
dcw 1030060649
dcw 1681403173
dcw 1836404256
dcw 1835363397
dcw 1937010277
dcw 174335293

dcw 27
OBJ4: #  Free: Size=%-8d Nex
dcw 1701987872
dcw 1394621029
dcw 1030060649
dcw 1681403173
dcw 2019905056
dcw 807746932
dcw 686136

dcw 12
OBJ5: # FreeMemBlock
dcw 1701147206
dcw 1114465613
dcw 1801678700

dcw 13
OBJ6: # ArrayMemBlock
dcw 1634890305
dcw 1835355513
dcw 1668246594
dcw 107

dcw 14
OBJ7: # ObjectMemBlock
dcw 1701470799
dcw 1699574883
dcw 1869365869
dcw 27491

dcw 15
OBJ8: # ClassDescriptor
dcw 1935764547
dcw 1936016499
dcw 1885958755
dcw 7499636

dcw 13
OBJ9: # StringBuilder
dcw 1769108563
dcw 1967286126
dcw 1701080169
dcw 114

dcw 4
OBJ10: # List
dcw 1953720652

dcw 9
OBJ11: # BitVector
dcw 1450469698
dcw 1869898597
dcw 114

