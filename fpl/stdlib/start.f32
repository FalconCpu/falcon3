
HWREGS_BASE = 0xE0000000
HWREGS_UART_TX = 0x10

# Temporary - keep global variables at address 0x0000000
SYSVARS_BASE = 0x00000000
SYSVARS_HEAP_PTR = 0x0004


# Entry point for the program
ld $31, 0x4000000    # Initialize stack pointer to top of memory
ld $29, 0x100        # initialize globals pointer to below the heap start

ld $9, SYSVARS_BASE
ld $10, 0x1000       # address for start of heap
stw $10, $9[SYSVARS_HEAP_PTR]

# jsr /init          # Call the initialization function
jsr /main()          # Call the main function
ld $30,0             # Do a jump to address zero to exit the program
jmp $30[0]


# ==========================================================
#                     printInt
# ==========================================================
# $1 = value to print

/printInt:
    sub $31, 16                # Allocate 16 bytes of stack space
    ld $7, HWREGS_BASE         # Load base address of hardware registers
    bge $1, 0, .positive       # If value is positive, skip
    ld  $2, '-'                # Print the '-' character
    stw $2, $7[HWREGS_UART_TX]
    sub $1, 0, $1              # Negate the value

.positive:
    ld $6, $31                 # $6 = pointer to work space

.loop:
    modu $2, $1, 10            # $2 = $1 % 10
    divu $1, $1, 10            # $1 = $1 / 10
    add $2, '0'                # Convert digit to ASCII
    stb $2, $6[0]              # Store digit in work space
    add $6, 1                  # Increment work space pointer
    bne $1, 0, .loop           # Repeat until $1 is 0

.print:
    sub $6, 1                   # Decrement work space pointer
    ldb $2, $6[0]               # Load digit from work space
    stw $2, $7[HWREGS_UART_TX] # Print the digit
    bne $6, $31, .print         # Repeat until work space pointer is at base

.end:
    add $31, 16
    ret

# ==========================================================
#                     printString
# ==========================================================
# $1 = string to print

/printString:
    ld $7, HWREGS_BASE         # Load base address of hardware registers
    ldw $2, $1[-4]             # Load length of string
    add $2, $1                 # Pointer to just past the end of string
    jmp .cond

.loop:
    ldb $3, $1[0]               # Load character from string
    stw $3, $7[HWREGS_UART_TX]  # Print the character
    add $1, 1                   # Increment string pointer
.cond:
    bne $1, $2, .loop           # Repeat until string pointer is at end
    ret

# ==========================================================
#                     printChar
# ==========================================================
# $1 = character to print

/printChar:
    ld $7, HWREGS_BASE         # Load base address of hardware registers
    stw $1, $7[HWREGS_UART_TX] # Print the character
    ret

# ==========================================================
#                     mallocArray
# ==========================================================
# $1 = number of elements
# $2 = size of each element
# returns:
# $8 = pointer to array

/mallocArray(Int,Int,Bool):
    mul $2, $2, $1               # $2 = number of bytes for array body
    add $2, 7                    # round up to multiple of 8
    and $2, -8
    add $2, 8                    # Add 8 bytes for header

    ld $3, SYSVARS_BASE
    ldw $8, $3[SYSVARS_HEAP_PTR] # Fetch heap pointer
    add $4, $8, $2               # Compute end of array
    stw $4, $3[SYSVARS_HEAP_PTR] # Store new heap pointer
    stw $2, $8[0]                # Store size of allocation
    stw $1, $8[4]                # Store length of array
    add $8, 8                    # Skip length word
    ret

# ==========================================================
#                     callocArray
# ==========================================================
# $1 = number of elements
# $2 = size of each element
# returns:
# $8 = pointer to array

/callocArray:
    mul $2, $2, $1               # $2 = number of bytes for array body
    add $2, 7                    # round up to multiple of 8
    and $2, -8
    add $2, 8                    # Add 8 bytes for header

    ld $3, SYSVARS_BASE
    ldw $8, $3[SYSVARS_HEAP_PTR] # Fetch heap pointer
    add $4, $8, $2               # Compute end of array
    stw $4, $3[SYSVARS_HEAP_PTR] # Store new heap pointer
    stw $2, $8[0]                # Store size of allocation
    stw $1, $8[4]                # Store length of array
    add $8, 8                    # Skip length word

    ld $1, $8
.clearloop:
    stw 0, $1[0]
    add $1, 4
    blt $1, $4, .clearloop

    ret

# ==========================================================
#                     mallocObject
# ==========================================================
# $1 = pointer to class descriptor
# returns:
# $8 = pointer to newly allocated object

/mallocObject(ClassDescriptor):
    ldw $2, $1[0]                # get the sizeInBytes field of the class descriptor
    add $2, 7                    # round up to multiple of 8
    and $2, -8
    add $2, 8                    # Add 8 bytes for header

    ld $3, SYSVARS_BASE
    ldw $8, $3[SYSVARS_HEAP_PTR] # Fetch heap pointer
    add $4, $8, $2               # Compute end of object
    stw $4, $3[SYSVARS_HEAP_PTR] # Store new heap pointer
    stw $2, $8[0]                # Store size of allocation
    stw $1, $8[4]                # Store object descriptor
    add $8, 8                    # Skip past the header
    ret



# ==========================================================
#                     freeArray
# ==========================================================
# $1 = pointer to array

freeArray:
    # For now, just do nothing
    ret


# ==========================================================
#                     strcmp
# ==========================================================
# Compare two strings lexicographically
# $1 = pointer to string 1
# $2 = pointer to string 2
# returns:
# $8 negative if string 1 < string 2, 0 if equal, positive if string 1 > string 2

/strcmp:
    ldw $3, $1[-4]       # get the length of string 1
    ldw $4, $2[-4]       # get the length of string 2

    ld $5, $3           # get the length of the shorter string
    blt $3, $4, .skip1
    ld $5, $4
.skip1:
    add $5, $5, $1       # point to end of shorter string
    jmp .check_end       # jump to compare point (in case both strings are empty)

.loop:
    ldb $8, $1[0]        # get a character from string 1
    ldb $6, $2[0]        # get a character from string 2
    sub $8, $6           # subtract the characters
    bne $8, 0, .done     # if they are not equal, we are done
    add $1, 1            # increment string 1 pointer
    add $2, 1            # increment string 2 pointer
.check_end:
    blt $1, $5, .loop    # if we have not reached the end of shorter string then loop

    sub $8, $3, $4       # set $8 indicate which string is longer
.done:
    ret


# ==========================================================
#                     strequal
# ==========================================================
# Compare two strings for equality
# $1 = pointer to string 1
# $2 = pointer to string 2
# returns:
# $8 = 1 if equal, 0 if not equal
#
# This makes use of the fact strings are word-aligned, and padded with 0 to a multiple of 4 bytes

/strequal:
    ldw $3, $1[-4]          # get the length of string 1
    ldw $4, $2[-4]          # get the length of string 2
    ld $8, 0               # set $8 to 0 - default return value
    bne $3, $4, .done      # if the lengths are not equal, we are done
    add $3, $1             # point to end of string 1  (Note since we know both strings are the same length,
                           # we don't need to calculate which is shorter
.loop:
    ldw $4, $1[0]          # get a word
    ldw $5, $2[0]          # get a word
    bne $4, $5, .done      # if the words are not equal, we are done
    add $1, 4              # increment string 1 pointer
    add $2, 4              # increment string 2 pointer
    blt $1, $3, .loop      # if we have not reached the end of the strings then loop
    ld $8, 1               # set $8 to 1 (true)
.done:
    ret

